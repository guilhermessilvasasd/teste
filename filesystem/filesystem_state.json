{"file_contents":{"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"attached_assets/agenda_1761521597267.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Pencil, Trash2, CheckCircle2, Circle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTaskSchema, type Task, type InsertTask } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function Agenda() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const { toast } = useToast();\n\n  const { data: tasks = [], isLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertTask) =>\n      apiRequest(\"/api/tasks\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Tarefa adicionada com sucesso!\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertTask }) =>\n      apiRequest(`/api/tasks/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Tarefa atualizada com sucesso!\" });\n      setDialogOpen(false);\n      setEditingTask(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/tasks/${id}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Tarefa removida com sucesso!\" });\n    },\n  });\n\n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      titulo: \"\",\n      descricao: \"\",\n      data: format(new Date(), \"yyyy-MM-dd\"),\n      hora: \"\",\n      concluida: false,\n      prioridade: \"media\",\n    },\n  });\n\n  const onSubmit = (data: InsertTask) => {\n    if (editingTask) {\n      updateMutation.mutate({ id: editingTask.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (task: Task) => {\n    setEditingTask(task);\n    form.reset({\n      titulo: task.titulo,\n      descricao: task.descricao || \"\",\n      data: task.data,\n      hora: task.hora || \"\",\n      concluida: task.concluida,\n      prioridade: task.prioridade,\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Tem certeza que deseja excluir esta tarefa?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleToggleComplete = (task: Task) => {\n    updateMutation.mutate({\n      id: task.id,\n      data: {\n        titulo: task.titulo,\n        descricao: task.descricao || \"\",\n        data: task.data,\n        hora: task.hora || \"\",\n        concluida: !task.concluida,\n        prioridade: task.prioridade,\n      },\n    });\n  };\n\n  const handleDialogClose = (open: boolean) => {\n    setDialogOpen(open);\n    if (!open) {\n      setEditingTask(null);\n      form.reset();\n    }\n  };\n\n  const tasksPendentes = tasks.filter((t) => !t.concluida);\n  const tasksConcluidas = tasks.filter((t) => t.concluida);\n\n  const getPrioridadeBadge = (prioridade: string) => {\n    const colors = {\n      alta: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n      media: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n      baixa: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n    };\n    return colors[prioridade as keyof typeof colors] || colors.media;\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-4xl font-bold\">Agenda</h1>\n        <Dialog open={dialogOpen} onOpenChange={handleDialogClose}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-task\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nova Tarefa\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingTask ? \"Editar Tarefa\" : \"Nova Tarefa\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"titulo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Título</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Reunião com cliente\"\n                          data-testid=\"input-titulo\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"descricao\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Detalhes da tarefa...\"\n                          data-testid=\"input-descricao\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"data\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            data-testid=\"input-data\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"hora\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Hora</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"time\"\n                            data-testid=\"input-hora\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"prioridade\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Prioridade</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-prioridade\">\n                            <SelectValue placeholder=\"Selecione\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"baixa\">Baixa</SelectItem>\n                          <SelectItem value=\"media\">Média</SelectItem>\n                          <SelectItem value=\"alta\">Alta</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-submit-task\"\n                >\n                  {editingTask ? \"Atualizar\" : \"Adicionar\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Tarefas Pendentes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-pendentes\">\n              {tasksPendentes.length}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Tarefas Concluídas</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-concluidas\">\n              {tasksConcluidas.length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Tarefas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Carregando...</p>\n          ) : tasks.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">\n              Nenhuma tarefa cadastrada. Adicione uma nova tarefa para começar.\n            </p>\n          ) : (\n            <div className=\"space-y-2\">\n              {tasks.map((task) => (\n                <div\n                  key={task.id}\n                  className=\"flex items-center justify-between p-4 rounded-md border\"\n                  data-testid={`task-item-${task.id}`}\n                >\n                  <div className=\"flex items-center gap-4 flex-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleToggleComplete(task)}\n                      data-testid={`button-toggle-${task.id}`}\n                    >\n                      {task.concluida ? (\n                        <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n                      ) : (\n                        <Circle className=\"h-5 w-5\" />\n                      )}\n                    </Button>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3\n                          className={`font-semibold ${task.concluida ? \"line-through text-muted-foreground\" : \"\"\n                            }`}\n                        >\n                          {task.titulo}\n                        </h3>\n                        <Badge className={getPrioridadeBadge(task.prioridade)}>\n                          {task.prioridade}\n                        </Badge>\n                      </div>\n                      {task.descricao && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          {task.descricao}\n                        </p>\n                      )}\n                      <p className=\"text-sm text-muted-foreground\">\n                        {format(new Date(task.data), \"dd/MM/yyyy\")}\n                        {task.hora && ` às ${task.hora}`}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(task)}\n                      data-testid={`button-edit-${task.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleDelete(task.id)}\n                      data-testid={`button-delete-${task.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13415},"attached_assets/treinos_1761521597273.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertWorkoutSchema, type Workout, type InsertWorkout } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function Treinos() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingWorkout, setEditingWorkout] = useState<Workout | null>(null);\n  const { toast } = useToast();\n\n  const { data: workouts = [], isLoading } = useQuery<Workout[]>({\n    queryKey: [\"/api/workouts\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertWorkout) =>\n      apiRequest(\"/api/workouts\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workouts\"] });\n      toast({ title: \"Treino adicionado com sucesso!\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertWorkout }) =>\n      apiRequest(`/api/workouts/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workouts\"] });\n      toast({ title: \"Treino atualizado com sucesso!\" });\n      setDialogOpen(false);\n      setEditingWorkout(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/workouts/${id}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workouts\"] });\n      toast({ title: \"Treino removido com sucesso!\" });\n    },\n  });\n\n  const form = useForm<InsertWorkout>({\n    resolver: zodResolver(insertWorkoutSchema),\n    defaultValues: {\n      exercicio: \"\",\n      series: 3,\n      repeticoes: 10,\n      peso: \"0\",\n      data: format(new Date(), \"yyyy-MM-dd\"),\n      observacoes: \"\",\n    },\n  });\n\n  const onSubmit = (data: InsertWorkout) => {\n    if (editingWorkout) {\n      updateMutation.mutate({ id: editingWorkout.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (workout: Workout) => {\n    setEditingWorkout(workout);\n    form.reset({\n      exercicio: workout.exercicio,\n      series: workout.series,\n      repeticoes: workout.repeticoes,\n      peso: workout.peso || \"0\",\n      data: workout.data,\n      observacoes: workout.observacoes || \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este treino?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleDialogClose = (open: boolean) => {\n    setDialogOpen(open);\n    if (!open) {\n      setEditingWorkout(null);\n      form.reset();\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-4xl font-bold\">Treinos</h1>\n        <Dialog open={dialogOpen} onOpenChange={handleDialogClose}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-workout\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Novo Treino\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingWorkout ? \"Editar Treino\" : \"Novo Treino\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"exercicio\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exercício</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Supino, Agachamento...\"\n                          data-testid=\"input-exercicio\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"series\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Séries</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            data-testid=\"input-series\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"repeticoes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Repetições</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            data-testid=\"input-repeticoes\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"peso\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Peso (kg)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.5\"\n                            data-testid=\"input-peso\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"data\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          data-testid=\"input-data\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"observacoes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Observações</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Notas sobre o treino...\"\n                          data-testid=\"input-observacoes\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-submit-workout\"\n                >\n                  {editingWorkout ? \"Atualizar\" : \"Adicionar\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Histórico de Treinos</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Carregando...</p>\n          ) : workouts.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">\n              Nenhum treino cadastrado. Adicione um novo treino para começar.\n            </p>\n          ) : (\n            <div className=\"space-y-2\">\n              {workouts.map((workout) => (\n                <div\n                  key={workout.id}\n                  className=\"flex items-center justify-between p-4 rounded-md border\"\n                  data-testid={`workout-item-${workout.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">{workout.exercicio}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {workout.series}x{workout.repeticoes} {workout.peso && `• ${workout.peso}kg`}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {format(new Date(workout.data), \"dd/MM/yyyy\")}\n                    </p>\n                    {workout.observacoes && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {workout.observacoes}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(workout)}\n                      data-testid={`button-edit-${workout.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleDelete(workout.id)}\n                      data-testid={`button-delete-${workout.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11081},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"attached_assets/replitAuth_1761507822899_1761510774299_1761521527027.ts":{"content":"// Referência: javascript_log_in_with_replit blueprint\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4277},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"attached_assets/index_1761510790698_1761521547991.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 217 91% 42%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 15% 88%;\n\n  --sidebar-accent-foreground: 217 30% 20%;\n\n  --sidebar-ring: 217 91% 42%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 217 91% 42%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 0 0% 15%;\n\n  --muted: 217 8% 90%;\n\n  --muted-foreground: 217 12% 32%;\n\n  --accent: 217 12% 88%;\n\n  --accent-foreground: 217 20% 24%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 78%;\n  --ring: 217 91% 42%;\n  --chart-1: 217 91% 42%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 65% 48%;\n  --chart-5: 12 76% 61%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.12), 0px 3px 6px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.15), 0px 4px 8px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.18), 0px 8px 12px -6px hsl(0 0% 0% / 0.12);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.22);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 217 91% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 12% 18%;\n\n  --sidebar-accent-foreground: 217 25% 85%;\n\n  --sidebar-ring: 217 91% 45%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 217 91% 48%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 18%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 217 8% 16%;\n\n  --muted-foreground: 217 12% 75%;\n\n  --accent: 217 10% 18%;\n\n  --accent-foreground: 217 15% 85%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 28%;\n  --ring: 217 91% 48%;\n  --chart-1: 217 91% 58%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 280 65% 68%;\n  --chart-5: 12 76% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.45), 0px 2px 4px -2px hsl(0 0% 0% / 0.3);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.5), 0px 3px 6px -3px hsl(0 0% 0% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.6), 0px 4px 8px -4px hsl(0 0% 0% / 0.4);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.7), 0px 8px 12px -6px hsl(0 0% 0% / 0.5);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.8);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Utility classes for monospace numbers (financial data, calculator results) */\n  .font-mono-numbers {\n    font-family: var(--font-mono);\n    font-variant-numeric: tabular-nums;\n  }\n\n  /* Smooth transitions for all interactive elements */\n  .transition-smooth {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}","size_bytes":11260},"attached_assets/estudos_1761521597271.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertStudySchema, type Study, type InsertStudy } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function Estudos() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingStudy, setEditingStudy] = useState<Study | null>(null);\n  const { toast } = useToast();\n\n  const { data: studies = [], isLoading } = useQuery<Study[]>({\n    queryKey: [\"/api/studies\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertStudy) =>\n      apiRequest(\"/api/studies\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/studies\"] });\n      toast({ title: \"Estudo adicionado com sucesso!\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertStudy }) =>\n      apiRequest(`/api/studies/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/studies\"] });\n      toast({ title: \"Estudo atualizado com sucesso!\" });\n      setDialogOpen(false);\n      setEditingStudy(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/studies/${id}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/studies\"] });\n      toast({ title: \"Estudo removido com sucesso!\" });\n    },\n  });\n\n  const form = useForm<InsertStudy>({\n    resolver: zodResolver(insertStudySchema),\n    defaultValues: {\n      titulo: \"\",\n      descricao: \"\",\n      categoria: \"\",\n      progresso: 0,\n      data_inicio: \"\",\n      data_conclusao: \"\",\n      observacoes: \"\",\n    },\n  });\n\n  const onSubmit = (data: InsertStudy) => {\n    if (editingStudy) {\n      updateMutation.mutate({ id: editingStudy.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (study: Study) => {\n    setEditingStudy(study);\n    form.reset({\n      titulo: study.titulo,\n      descricao: study.descricao || \"\",\n      categoria: study.categoria,\n      progresso: study.progresso,\n      data_inicio: study.data_inicio || \"\",\n      data_conclusao: study.data_conclusao || \"\",\n      observacoes: study.observacoes || \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Tem certeza que deseja excluir este estudo?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleDialogClose = (open: boolean) => {\n    setDialogOpen(open);\n    if (!open) {\n      setEditingStudy(null);\n      form.reset();\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-4xl font-bold\">Estudos</h1>\n        <Dialog open={dialogOpen} onOpenChange={handleDialogClose}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-study\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Novo Estudo\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingStudy ? \"Editar Estudo\" : \"Novo Estudo\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"titulo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Título</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Curso de JavaScript\"\n                          data-testid=\"input-titulo\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"categoria\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Categoria</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Programação, Idiomas...\"\n                          data-testid=\"input-categoria\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"descricao\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Detalhes sobre o estudo...\"\n                          data-testid=\"input-descricao\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"progresso\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Progresso (%)</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          data-testid=\"input-progresso\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"data_inicio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data de Início</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            data-testid=\"input-data-inicio\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"data_conclusao\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data de Conclusão</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            data-testid=\"input-data-conclusao\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"observacoes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Observações</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Notas adicionais...\"\n                          data-testid=\"input-observacoes\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-submit-study\"\n                >\n                  {editingStudy ? \"Atualizar\" : \"Adicionar\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Meus Estudos</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Carregando...</p>\n          ) : studies.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">\n              Nenhum estudo cadastrado. Adicione um novo estudo para começar.\n            </p>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {studies.map((study) => (\n                <Card key={study.id} data-testid={`study-item-${study.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{study.titulo}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {study.categoria}\n                        </p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleEdit(study)}\n                          data-testid={`button-edit-${study.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDelete(study.id)}\n                          data-testid={`button-delete-${study.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {study.descricao && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        {study.descricao}\n                      </p>\n                    )}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span>Progresso</span>\n                        <span className=\"font-mono font-semibold\">\n                          {study.progresso}%\n                        </span>\n                      </div>\n                      <Progress value={study.progresso} />\n                    </div>\n                    {(study.data_inicio || study.data_conclusao) && (\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        {study.data_inicio && (\n                          <p>\n                            Início:{\" \"}\n                            {format(new Date(study.data_inicio), \"dd/MM/yyyy\")}\n                          </p>\n                        )}\n                        {study.data_conclusao && (\n                          <p>\n                            Conclusão:{\" \"}\n                            {format(new Date(study.data_conclusao), \"dd/MM/yyyy\")}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                    {study.observacoes && (\n                      <p className=\"text-sm text-muted-foreground\">\n                        {study.observacoes}\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13113},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"attached_assets/storage_1761510881691_1761521527031.ts":{"content":"import { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport {\n  users, workouts, exercises, workoutLogs, foodItems, meals, userNutritionProfile,\n  transactions, tasks, notes, studyMaterials, userProgress, chatMessages,\n  type User, type UpsertUser,\n  type Workout, type InsertWorkout,\n  type Exercise, type InsertExercise,\n  type WorkoutLog, type InsertWorkoutLog,\n  type FoodItem, type InsertFoodItem,\n  type Meal, type InsertMeal,\n  type NutritionProfile, type InsertNutritionProfile,\n  type Transaction, type InsertTransaction,\n  type Task, type InsertTask,\n  type Note, type InsertNote,\n  type StudyMaterial, type InsertStudyMaterial,\n  type UserProgress, type InsertUserProgress,\n  type ChatMessage, type InsertChatMessage,\n} from \"@shared/schema\";\n\n// Storage interface with all CRUD operations\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Workouts\n  getWorkouts(userId: string): Promise<Workout[]>;\n  getWorkout(id: string): Promise<Workout | undefined>;\n  createWorkout(workout: InsertWorkout): Promise<Workout>;\n  updateWorkout(id: string, workout: Partial<InsertWorkout>): Promise<Workout>;\n  deleteWorkout(id: string): Promise<void>;\n\n  // Exercises\n  getExercises(workoutId: string): Promise<Exercise[]>;\n  createExercise(exercise: InsertExercise): Promise<Exercise>;\n  updateExercise(id: string, exercise: Partial<InsertExercise>): Promise<Exercise>;\n  deleteExercise(id: string): Promise<void>;\n\n  // Workout Logs\n  getWorkoutLogs(userId: string, date?: string): Promise<WorkoutLog[]>;\n  createWorkoutLog(log: InsertWorkoutLog): Promise<WorkoutLog>;\n\n  // Food Items\n  getFoodItems(userId?: string): Promise<FoodItem[]>;\n  createFoodItem(food: InsertFoodItem): Promise<FoodItem>;\n\n  // Meals\n  getMeals(userId: string, date?: string): Promise<Meal[]>;\n  createMeal(meal: InsertMeal): Promise<Meal>;\n  deleteMeal(id: string): Promise<void>;\n\n  // Nutrition Profile\n  getNutritionProfile(userId: string): Promise<NutritionProfile | undefined>;\n  upsertNutritionProfile(profile: InsertNutritionProfile): Promise<NutritionProfile>;\n\n  // Transactions\n  getTransactions(userId: string, month?: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  deleteTransaction(id: string): Promise<void>;\n\n  // Tasks\n  getTasks(userId: string, date?: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n\n  // Notes\n  getNotes(userId: string, date?: string): Promise<Note[]>;\n  createNote(note: InsertNote): Promise<Note>;\n  updateNote(id: string, note: Partial<InsertNote>): Promise<Note>;\n  deleteNote(id: string): Promise<void>;\n\n  // Study Materials\n  getStudyMaterials(subject?: string): Promise<StudyMaterial[]>;\n  createStudyMaterial(material: InsertStudyMaterial): Promise<StudyMaterial>;\n  deleteStudyMaterial(id: string): Promise<void>;\n\n  // User Progress\n  getUserProgress(userId: string, materialId?: string): Promise<UserProgress[]>;\n  upsertUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n\n  // Chat Messages\n  getChatMessages(userId: string, context?: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // ========== Users ==========\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(upsertUser: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        id: upsertUser.id,\n        email: upsertUser.email,\n        firstName: upsertUser.firstName,\n        lastName: upsertUser.lastName,\n        profileImageUrl: upsertUser.profileImageUrl,\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: upsertUser.email,\n          firstName: upsertUser.firstName,\n          lastName: upsertUser.lastName,\n          profileImageUrl: upsertUser.profileImageUrl,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // ========== Workouts ==========\n  async getWorkouts(userId: string): Promise<Workout[]> {\n    return await db.select().from(workouts).where(eq(workouts.userId, userId)).orderBy(desc(workouts.createdAt));\n  }\n\n  async getWorkout(id: string): Promise<Workout | undefined> {\n    const [workout] = await db.select().from(workouts).where(eq(workouts.id, id));\n    return workout || undefined;\n  }\n\n  async createWorkout(workout: InsertWorkout): Promise<Workout> {\n    const [newWorkout] = await db.insert(workouts).values(workout).returning();\n    return newWorkout;\n  }\n\n  async updateWorkout(id: string, workout: Partial<InsertWorkout>): Promise<Workout> {\n    const [updated] = await db.update(workouts).set({ ...workout, updatedAt: new Date() }).where(eq(workouts.id, id)).returning();\n    return updated;\n  }\n\n  async deleteWorkout(id: string): Promise<void> {\n    await db.delete(workouts).where(eq(workouts.id, id));\n  }\n\n  // ========== Exercises ==========\n  async getExercises(workoutId: string): Promise<Exercise[]> {\n    return await db.select().from(exercises).where(eq(exercises.workoutId, workoutId)).orderBy(exercises.order);\n  }\n\n  async createExercise(exercise: InsertExercise): Promise<Exercise> {\n    const [newExercise] = await db.insert(exercises).values(exercise).returning();\n    return newExercise;\n  }\n\n  async updateExercise(id: string, exercise: Partial<InsertExercise>): Promise<Exercise> {\n    const [updated] = await db.update(exercises).set(exercise).where(eq(exercises.id, id)).returning();\n    return updated;\n  }\n\n  async deleteExercise(id: string): Promise<void> {\n    await db.delete(exercises).where(eq(exercises.id, id));\n  }\n\n  // ========== Workout Logs ==========\n  async getWorkoutLogs(userId: string, date?: string): Promise<WorkoutLog[]> {\n    const query = db.select().from(workoutLogs).where(eq(workoutLogs.userId, userId));\n    if (date) {\n      return await query.where(and(eq(workoutLogs.userId, userId), eq(workoutLogs.date, date))).orderBy(desc(workoutLogs.createdAt));\n    }\n    return await query.orderBy(desc(workoutLogs.createdAt));\n  }\n\n  async createWorkoutLog(log: InsertWorkoutLog): Promise<WorkoutLog> {\n    const [newLog] = await db.insert(workoutLogs).values(log).returning();\n    return newLog;\n  }\n\n  // ========== Food Items ==========\n  async getFoodItems(userId?: string): Promise<FoodItem[]> {\n    if (userId) {\n      return await db.select().from(foodItems).where(eq(foodItems.userId, userId));\n    }\n    return await db.select().from(foodItems);\n  }\n\n  async createFoodItem(food: InsertFoodItem): Promise<FoodItem> {\n    const [newFood] = await db.insert(foodItems).values(food).returning();\n    return newFood;\n  }\n\n  // ========== Meals ==========\n  async getMeals(userId: string, date?: string): Promise<Meal[]> {\n    const query = db.select().from(meals).where(eq(meals.userId, userId));\n    if (date) {\n      return await query.where(and(eq(meals.userId, userId), eq(meals.date, date))).orderBy(desc(meals.createdAt));\n    }\n    return await query.orderBy(desc(meals.createdAt));\n  }\n\n  async createMeal(meal: InsertMeal): Promise<Meal> {\n    const [newMeal] = await db.insert(meals).values(meal).returning();\n    return newMeal;\n  }\n\n  async deleteMeal(id: string): Promise<void> {\n    await db.delete(meals).where(eq(meals.id, id));\n  }\n\n  // ========== Nutrition Profile ==========\n  async getNutritionProfile(userId: string): Promise<NutritionProfile | undefined> {\n    const [profile] = await db.select().from(userNutritionProfile).where(eq(userNutritionProfile.userId, userId));\n    return profile || undefined;\n  }\n\n  async upsertNutritionProfile(profile: InsertNutritionProfile): Promise<NutritionProfile> {\n    const [result] = await db\n      .insert(userNutritionProfile)\n      .values(profile)\n      .onConflictDoUpdate({\n        target: userNutritionProfile.userId,\n        set: {\n          ...profile,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  // ========== Transactions ==========\n  async getTransactions(userId: string, month?: string): Promise<Transaction[]> {\n    const query = db.select().from(transactions).where(eq(transactions.userId, userId));\n    if (month) {\n      return await query.orderBy(desc(transactions.date));\n    }\n    return await query.orderBy(desc(transactions.date));\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async deleteTransaction(id: string): Promise<void> {\n    await db.delete(transactions).where(eq(transactions.id, id));\n  }\n\n  // ========== Tasks ==========\n  async getTasks(userId: string, date?: string): Promise<Task[]> {\n    const query = db.select().from(tasks).where(eq(tasks.userId, userId));\n    if (date) {\n      return await query.where(and(eq(tasks.userId, userId), eq(tasks.date, date))).orderBy(tasks.time);\n    }\n    return await query.orderBy(desc(tasks.date));\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const [newTask] = await db.insert(tasks).values(task).returning();\n    return newTask;\n  }\n\n  async updateTask(id: string, task: Partial<InsertTask>): Promise<Task> {\n    const [updated] = await db.update(tasks).set({ ...task, updatedAt: new Date() }).where(eq(tasks.id, id)).returning();\n    return updated;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  // ========== Notes ==========\n  async getNotes(userId: string, date?: string): Promise<Note[]> {\n    const query = db.select().from(notes).where(eq(notes.userId, userId));\n    if (date) {\n      return await query.where(and(eq(notes.userId, userId), eq(notes.date, date))).orderBy(desc(notes.createdAt));\n    }\n    return await query.orderBy(desc(notes.createdAt));\n  }\n\n  async createNote(note: InsertNote): Promise<Note> {\n    const [newNote] = await db.insert(notes).values(note).returning();\n    return newNote;\n  }\n\n  async updateNote(id: string, note: Partial<InsertNote>): Promise<Note> {\n    const [updated] = await db.update(notes).set({ ...note, updatedAt: new Date() }).where(eq(notes.id, id)).returning();\n    return updated;\n  }\n\n  async deleteNote(id: string): Promise<void> {\n    await db.delete(notes).where(eq(notes.id, id));\n  }\n\n  // ========== Study Materials ==========\n  async getStudyMaterials(subject?: string): Promise<StudyMaterial[]> {\n    if (subject) {\n      return await db.select().from(studyMaterials).where(eq(studyMaterials.subject, subject)).orderBy(desc(studyMaterials.createdAt));\n    }\n    return await db.select().from(studyMaterials).orderBy(desc(studyMaterials.createdAt));\n  }\n\n  async createStudyMaterial(material: InsertStudyMaterial): Promise<StudyMaterial> {\n    const [newMaterial] = await db.insert(studyMaterials).values(material).returning();\n    return newMaterial;\n  }\n\n  async deleteStudyMaterial(id: string): Promise<void> {\n    await db.delete(studyMaterials).where(eq(studyMaterials.id, id));\n  }\n\n  // ========== User Progress ==========\n  async getUserProgress(userId: string, materialId?: string): Promise<UserProgress[]> {\n    const query = db.select().from(userProgress).where(eq(userProgress.userId, userId));\n    if (materialId) {\n      return await query.where(and(eq(userProgress.userId, userId), eq(userProgress.materialId, materialId)));\n    }\n    return await query.orderBy(desc(userProgress.updatedAt));\n  }\n\n  async upsertUserProgress(progress: InsertUserProgress): Promise<UserProgress> {\n    const [result] = await db\n      .insert(userProgress)\n      .values(progress)\n      .onConflictDoUpdate({\n        target: [userProgress.userId, userProgress.materialId],\n        set: {\n          ...progress,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  // ========== Chat Messages ==========\n  async getChatMessages(userId: string, context?: string): Promise<ChatMessage[]> {\n    const query = db.select().from(chatMessages).where(eq(chatMessages.userId, userId));\n    if (context) {\n      return await query.where(and(eq(chatMessages.userId, userId), eq(chatMessages.context, context))).orderBy(chatMessages.createdAt);\n    }\n    return await query.orderBy(chatMessages.createdAt);\n  }\n\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12862},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"attached_assets/drizzle.config_1761510492028_1761521565029.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"attached_assets/dashboard_1761510896235_1761521565022.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dumbbell, Apple, Wallet, Calendar, BookOpen, TrendingUp } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useUser } from \"@/hooks/use-user\";\nimport type { WorkoutLog, Meal, Transaction, Task, StudyMaterial } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { userId } = useUser();\n  const today = new Date().toISOString().split('T')[0];\n  const thisMonth = new Date().toISOString().slice(0, 7);\n\n  // Fetch data from multiple endpoints in parallel\n  const { data: workoutLogs = [], isLoading: logsLoading } = useQuery<WorkoutLog[]>({\n    queryKey: [`/api/workout-logs?userId=${userId}`],\n  });\n\n  const { data: meals = [], isLoading: mealsLoading } = useQuery<Meal[]>({\n    queryKey: [`/api/meals?userId=${userId}&date=${today}`],\n  });\n\n  const { data: transactions = [], isLoading: transactionsLoading } = useQuery<Transaction[]>({\n    queryKey: [`/api/transactions?userId=${userId}&month=${thisMonth}`],\n  });\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [`/api/tasks?userId=${userId}`],\n  });\n\n  const { data: studyMaterials = [], isLoading: materialsLoading } = useQuery<StudyMaterial[]>({\n    queryKey: [\"/api/study-materials\"],\n  });\n\n  const isLoading = logsLoading || mealsLoading || transactionsLoading || tasksLoading || materialsLoading;\n\n  // Calculate stats\n  const oneWeekAgo = new Date();\n  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n  const workoutsThisWeek = workoutLogs.filter(\n    (log) => new Date(log.completedAt) >= oneWeekAgo\n  ).length;\n\n  const caloriesToday = meals.reduce((sum, meal) => {\n    const items = Array.isArray(meal.items) ? meal.items : [];\n    return sum + items.reduce((itemSum: number, item: any) => {\n      return itemSum + (item.calories || 0) * (item.servings || 1);\n    }, 0);\n  }, 0);\n\n  const monthBalance = transactions.reduce((sum, t) => {\n    return t.type === 'income' ? sum + t.amount : sum - t.amount;\n  }, 0);\n\n  const pendingTasks = tasks.filter((t) => !t.completed).length;\n\n  const stats = [\n    {\n      title: \"Treinos esta semana\",\n      value: workoutsThisWeek.toString(),\n      description: workoutsThisWeek > 0 ? `${workoutsThisWeek} treino${workoutsThisWeek > 1 ? 's' : ''} completado${workoutsThisWeek > 1 ? 's' : ''}` : \"Nenhum treino registrado ainda\",\n      icon: Dumbbell,\n      color: \"text-chart-1\",\n    },\n    {\n      title: \"Calorias hoje\",\n      value: `${Math.round(caloriesToday)} kcal`,\n      description: caloriesToday > 0 ? \"Consumidas hoje\" : \"Configure seu perfil nutricional\",\n      icon: Apple,\n      color: \"text-chart-2\",\n    },\n    {\n      title: \"Saldo do mês\",\n      value: new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(monthBalance),\n      description: monthBalance >= 0 ? \"Positivo\" : \"Negativo\",\n      icon: Wallet,\n      color: \"text-chart-3\",\n    },\n    {\n      title: \"Tarefas pendentes\",\n      value: pendingTasks.toString(),\n      description: pendingTasks > 0 ? `${pendingTasks} tarefa${pendingTasks > 1 ? 's' : ''} pendente${pendingTasks > 1 ? 's' : ''}` : \"Nenhuma tarefa agendada\",\n      icon: Calendar,\n      color: \"text-chart-4\",\n    },\n    {\n      title: \"Materiais de estudo\",\n      value: studyMaterials.length.toString(),\n      description: studyMaterials.length > 0 ? \"Recursos disponíveis\" : \"Comece seus estudos\",\n      icon: BookOpen,\n      color: \"text-chart-5\",\n    },\n    {\n      title: \"Progresso geral\",\n      value: \"0%\",\n      description: \"Comece a usar o sistema\",\n      icon: TrendingUp,\n      color: \"text-primary\",\n    },\n  ];\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">\n            Bem-vindo ao seu hub de gerenciamento pessoal\n          </p>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {isLoading ? (\n            [...Array(6)].map((_, index) => (\n              <Card key={index}>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-4 w-4 rounded\" />\n                </CardHeader>\n                <CardContent>\n                  <Skeleton className=\"h-8 w-20 mb-1\" />\n                  <Skeleton className=\"h-3 w-32\" />\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            stats.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <Card key={index} className=\"hover-elevate\" data-testid={`card-stat-${index}`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">\n                      {stat.title}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${stat.color}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid={`text-stat-value-${index}`}>\n                      {stat.value}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {stat.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Atividades Recentes</CardTitle>\n              <CardDescription>\n                Suas últimas ações no sistema\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-center h-32 text-muted-foreground\">\n                <p className=\"text-sm\">Nenhuma atividade recente</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Dicas Rápidas</CardTitle>\n              <CardDescription>\n                Orientações para aproveitar melhor o sistema\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-start gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                <p className=\"text-sm\">Configure seu perfil nutricional para tracking de dieta</p>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                <p className=\"text-sm\">Crie seu primeiro programa de treino</p>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                <p className=\"text-sm\">Registre suas despesas diárias para melhor controle financeiro</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7399},"attached_assets/vite.config_1761521290427.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/drizzle.config_1761521290431.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"attached_assets/storage_1761521644309.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Finance,\n  type InsertFinance,\n  type Workout,\n  type InsertWorkout,\n  type Meal,\n  type InsertMeal,\n  type Task,\n  type InsertTask,\n  type Study,\n  type InsertStudy\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  getFinances(): Promise<Finance[]>;\n  getFinance(id: string): Promise<Finance | undefined>;\n  createFinance(finance: InsertFinance): Promise<Finance>;\n  updateFinance(id: string, finance: InsertFinance): Promise<Finance | undefined>;\n  deleteFinance(id: string): Promise<boolean>;\n\n  getWorkouts(): Promise<Workout[]>;\n  getWorkout(id: string): Promise<Workout | undefined>;\n  createWorkout(workout: InsertWorkout): Promise<Workout>;\n  updateWorkout(id: string, workout: InsertWorkout): Promise<Workout | undefined>;\n  deleteWorkout(id: string): Promise<boolean>;\n\n  getMeals(): Promise<Meal[]>;\n  getMeal(id: string): Promise<Meal | undefined>;\n  createMeal(meal: InsertMeal): Promise<Meal>;\n  updateMeal(id: string, meal: InsertMeal): Promise<Meal | undefined>;\n  deleteMeal(id: string): Promise<boolean>;\n\n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: InsertTask): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n\n  getStudies(): Promise<Study[]>;\n  getStudy(id: string): Promise<Study | undefined>;\n  createStudy(study: InsertStudy): Promise<Study>;\n  updateStudy(id: string, study: InsertStudy): Promise<Study | undefined>;\n  deleteStudy(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private finances: Map<string, Finance>;\n  private workouts: Map<string, Workout>;\n  private meals: Map<string, Meal>;\n  private tasks: Map<string, Task>;\n  private studies: Map<string, Study>;\n\n  constructor() {\n    this.users = new Map();\n    this.finances = new Map();\n    this.workouts = new Map();\n    this.meals = new Map();\n    this.tasks = new Map();\n    this.studies = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getFinances(): Promise<Finance[]> {\n    return Array.from(this.finances.values()).sort((a, b) => \n      new Date(b.data).getTime() - new Date(a.data).getTime()\n    );\n  }\n\n  async getFinance(id: string): Promise<Finance | undefined> {\n    return this.finances.get(id);\n  }\n\n  async createFinance(finance: InsertFinance): Promise<Finance> {\n    const id = randomUUID();\n    const newFinance: Finance = { ...finance, id };\n    this.finances.set(id, newFinance);\n    return newFinance;\n  }\n\n  async updateFinance(id: string, finance: InsertFinance): Promise<Finance | undefined> {\n    if (!this.finances.has(id)) return undefined;\n    const updated: Finance = { ...finance, id };\n    this.finances.set(id, updated);\n    return updated;\n  }\n\n  async deleteFinance(id: string): Promise<boolean> {\n    return this.finances.delete(id);\n  }\n\n  async getWorkouts(): Promise<Workout[]> {\n    return Array.from(this.workouts.values()).sort((a, b) => \n      new Date(b.data).getTime() - new Date(a.data).getTime()\n    );\n  }\n\n  async getWorkout(id: string): Promise<Workout | undefined> {\n    return this.workouts.get(id);\n  }\n\n  async createWorkout(workout: InsertWorkout): Promise<Workout> {\n    const id = randomUUID();\n    const newWorkout: Workout = { ...workout, id };\n    this.workouts.set(id, newWorkout);\n    return newWorkout;\n  }\n\n  async updateWorkout(id: string, workout: InsertWorkout): Promise<Workout | undefined> {\n    if (!this.workouts.has(id)) return undefined;\n    const updated: Workout = { ...workout, id };\n    this.workouts.set(id, updated);\n    return updated;\n  }\n\n  async deleteWorkout(id: string): Promise<boolean> {\n    return this.workouts.delete(id);\n  }\n\n  async getMeals(): Promise<Meal[]> {\n    return Array.from(this.meals.values()).sort((a, b) => \n      new Date(b.data).getTime() - new Date(a.data).getTime()\n    );\n  }\n\n  async getMeal(id: string): Promise<Meal | undefined> {\n    return this.meals.get(id);\n  }\n\n  async createMeal(meal: InsertMeal): Promise<Meal> {\n    const id = randomUUID();\n    const newMeal: Meal = { ...meal, id };\n    this.meals.set(id, newMeal);\n    return newMeal;\n  }\n\n  async updateMeal(id: string, meal: InsertMeal): Promise<Meal | undefined> {\n    if (!this.meals.has(id)) return undefined;\n    const updated: Meal = { ...meal, id };\n    this.meals.set(id, updated);\n    return updated;\n  }\n\n  async deleteMeal(id: string): Promise<boolean> {\n    return this.meals.delete(id);\n  }\n\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values()).sort((a, b) => \n      new Date(b.data).getTime() - new Date(a.data).getTime()\n    );\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const newTask: Task = { ...task, id };\n    this.tasks.set(id, newTask);\n    return newTask;\n  }\n\n  async updateTask(id: string, task: InsertTask): Promise<Task | undefined> {\n    if (!this.tasks.has(id)) return undefined;\n    const updated: Task = { ...task, id };\n    this.tasks.set(id, updated);\n    return updated;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    return this.tasks.delete(id);\n  }\n\n  async getStudies(): Promise<Study[]> {\n    return Array.from(this.studies.values()).sort((a, b) => \n      (b.progresso || 0) - (a.progresso || 0)\n    );\n  }\n\n  async getStudy(id: string): Promise<Study | undefined> {\n    return this.studies.get(id);\n  }\n\n  async createStudy(study: InsertStudy): Promise<Study> {\n    const id = randomUUID();\n    const newStudy: Study = { ...study, id };\n    this.studies.set(id, newStudy);\n    return newStudy;\n  }\n\n  async updateStudy(id: string, study: InsertStudy): Promise<Study | undefined> {\n    if (!this.studies.has(id)) return undefined;\n    const updated: Study = { ...study, id };\n    this.studies.set(id, updated);\n    return updated;\n  }\n\n  async deleteStudy(id: string): Promise<boolean> {\n    return this.studies.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6756},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"attached_assets/finance_1761510896236_1761521565030.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, TrendingUp, TrendingDown, DollarSign, AlertCircle, Lightbulb } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useUser } from \"@/hooks/use-user\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function Finance() {\n  const { userId } = useUser();\n  const thisMonth = new Date().toISOString().slice(0, 7);\n\n  // Fetch transactions from backend\n  const { data: transactions = [], isLoading } = useQuery<Transaction[]>({\n    queryKey: [`/api/transactions?userId=${userId}&month=${thisMonth}`],\n  });\n\n  // Calculate monthly metrics\n  const monthlyIncome = transactions\n    .filter((t) => t.type === 'income')\n    .reduce((sum, t) => sum + t.amount, 0);\n\n  const monthlyExpenses = transactions\n    .filter((t) => t.type === 'expense')\n    .reduce((sum, t) => sum + t.amount, 0);\n\n  const balance = monthlyIncome - monthlyExpenses;\n  const balancePercentage = monthlyIncome > 0 ? ((balance / monthlyIncome) * 100).toFixed(1) : 0;\n\n  // Dicas personalizadas baseadas no padrão de gastos\n  const getTips = () => {\n    const tips = [];\n    \n    if (monthlyIncome === 0) {\n      tips.push({\n        type: \"info\",\n        message: \"Comece registrando suas receitas para ter uma visão completa das suas finanças.\",\n      });\n    }\n    \n    if (monthlyExpenses > monthlyIncome * 0.9) {\n      tips.push({\n        type: \"warning\",\n        message: \"Atenção: Suas despesas estão muito próximas da sua renda. Considere reduzir gastos não essenciais.\",\n      });\n    }\n    \n    if (balance > 0 && balance < monthlyIncome * 0.1) {\n      tips.push({\n        type: \"info\",\n        message: \"Tente economizar pelo menos 20% da sua renda mensal para criar uma reserva de emergência.\",\n      });\n    }\n    \n    if (balance >= monthlyIncome * 0.2) {\n      tips.push({\n        type: \"success\",\n        message: \"Excelente! Você está economizando mais de 20% da sua renda. Continue assim!\",\n      });\n    }\n\n    if (tips.length === 0) {\n      tips.push({\n        type: \"info\",\n        message: \"Registre suas transações diárias para receber dicas personalizadas de economia.\",\n      });\n    }\n\n    return tips;\n  };\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">Finanças</h1>\n            <p className=\"text-muted-foreground\">\n              Gerencie suas receitas e despesas com inteligência\n            </p>\n          </div>\n          <Button data-testid=\"button-add-transaction\">\n            <Plus className=\"h-4 w-4\" />\n            Nova Transação\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-lg grid-cols-3\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n              Visão Geral\n            </TabsTrigger>\n            <TabsTrigger value=\"calculator\" data-testid=\"tab-calculator\">\n              Calculadora\n            </TabsTrigger>\n            <TabsTrigger value=\"transactions\" data-testid=\"tab-transactions\">\n              Transações\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4 mt-6\">\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Receitas do Mês</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-chart-2\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-chart-2\" data-testid=\"text-income\">\n                    R$ {monthlyIncome.toFixed(2)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Total de entradas\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Despesas do Mês</CardTitle>\n                  <TrendingDown className=\"h-4 w-4 text-destructive\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-destructive\" data-testid=\"text-expenses\">\n                    R$ {monthlyExpenses.toFixed(2)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Total de saídas\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Saldo do Mês</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-primary\" />\n                </CardHeader>\n                <CardContent>\n                  <div \n                    className={`text-2xl font-bold ${\n                      balance >= 0 ? \"text-chart-2\" : \"text-destructive\"\n                    }`}\n                    data-testid=\"text-balance\"\n                  >\n                    R$ {balance.toFixed(2)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {balancePercentage}% da renda\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lightbulb className=\"h-5 w-5 text-chart-3\" />\n                  Dicas Personalizadas\n                </CardTitle>\n                <CardDescription>\n                  Orientações baseadas nos seus padrões de gastos\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {getTips().map((tip, index) => (\n                  <Alert \n                    key={index}\n                    variant={tip.type === \"warning\" ? \"destructive\" : \"default\"}\n                    data-testid={`alert-tip-${index}`}\n                  >\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>{tip.message}</AlertDescription>\n                  </Alert>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Despesas por Categoria</CardTitle>\n                <CardDescription>\n                  Onde seu dinheiro está indo\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-40 text-muted-foreground\">\n                  <p className=\"text-sm\">Nenhuma transação registrada este mês</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"calculator\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Calculadora Financeira</CardTitle>\n                <CardDescription>\n                  Simule diferentes cenários financeiros e planeje seu futuro\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid gap-6 md:grid-cols-2\">\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-semibold text-sm\">Regra 50/30/20</h3>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Distribua sua renda de forma equilibrada\n                    </p>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center p-3 rounded-lg bg-muted\">\n                        <span className=\"text-sm\">Essenciais (50%)</span>\n                        <Badge>R$ {(monthlyIncome * 0.5).toFixed(2)}</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center p-3 rounded-lg bg-muted\">\n                        <span className=\"text-sm\">Desejos (30%)</span>\n                        <Badge>R$ {(monthlyIncome * 0.3).toFixed(2)}</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center p-3 rounded-lg bg-muted\">\n                        <span className=\"text-sm\">Poupança (20%)</span>\n                        <Badge>R$ {(monthlyIncome * 0.2).toFixed(2)}</Badge>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <h3 className=\"font-semibold text-sm\">Meta de Reserva de Emergência</h3>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Tenha 6 meses de despesas guardadas\n                    </p>\n                    <div className=\"p-4 rounded-lg border\">\n                      <div className=\"text-sm text-muted-foreground mb-1\">Meta ideal:</div>\n                      <div className=\"text-2xl font-bold text-primary\">\n                        R$ {(monthlyExpenses * 6).toFixed(2)}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Baseado nas suas despesas mensais\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t\">\n                  <h3 className=\"font-semibold\">Dicas de Economia:</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                      <p className=\"text-sm\">Automatize suas economias: transfira uma porcentagem fixa para poupança assim que receber</p>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                      <p className=\"text-sm\">Evite dívidas de cartão de crédito: pague sempre o valor total da fatura</p>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                      <p className=\"text-sm\">Compare preços antes de comprar: use aplicativos de comparação</p>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <div className=\"h-2 w-2 rounded-full bg-primary mt-1.5\" />\n                      <p className=\"text-sm\">Cozinhe em casa: economize até 70% comparado a comer fora</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"transactions\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Histórico de Transações</CardTitle>\n                <CardDescription>\n                  Todas as suas receitas e despesas\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-40 border-2 border-dashed rounded-lg\">\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Nenhuma transação registrada ainda\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-first-transaction\">\n                      <Plus className=\"h-4 w-4\" />\n                      Adicionar Primeira Transação\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12755},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"attached_assets/dashboard_1761521597269.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { DollarSign, Dumbbell, UtensilsCrossed, Calendar, BookOpen, ArrowRight } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Finance, Workout, Meal, Task, Study } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { data: finances = [] } = useQuery<Finance[]>({\n    queryKey: [\"/api/finances\"],\n  });\n\n  const { data: workouts = [] } = useQuery<Workout[]>({\n    queryKey: [\"/api/workouts\"],\n  });\n\n  const { data: meals = [] } = useQuery<Meal[]>({\n    queryKey: [\"/api/meals\"],\n  });\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: studies = [] } = useQuery<Study[]>({\n    queryKey: [\"/api/studies\"],\n  });\n\n  const totalReceitas = finances\n    .filter((f) => f.tipo === \"receita\")\n    .reduce((sum, f) => sum + parseFloat(f.valor), 0);\n\n  const totalDespesas = finances\n    .filter((f) => f.tipo === \"despesa\")\n    .reduce((sum, f) => sum + parseFloat(f.valor), 0);\n\n  const saldo = totalReceitas - totalDespesas;\n\n  const totalCalorias = meals.reduce((sum, m) => sum + (m.calorias || 0), 0);\n  const tasksPendentes = tasks.filter((t) => !t.concluida).length;\n  const progressoEstudos = studies.length > 0\n    ? Math.round(studies.reduce((sum, s) => sum + s.progresso, 0) / studies.length)\n    : 0;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-4xl font-bold\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Visão geral da sua vida pessoal\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Finanças</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div\n              className={`text-2xl font-bold font-mono ${saldo >= 0 ? \"text-green-600\" : \"text-red-600\"\n                }`}\n              data-testid=\"text-saldo-dashboard\"\n            >\n              R$ {saldo.toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              {finances.length} transações registradas\n            </p>\n            <Link href=\"/financas\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mt-4 w-full\" data-testid=\"link-financas\">\n                Ver detalhes\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Treinos</CardTitle>\n            <Dumbbell className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-treinos-dashboard\">\n              {workouts.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Treinos registrados\n            </p>\n            <Link href=\"/treinos\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mt-4 w-full\" data-testid=\"link-treinos\">\n                Ver detalhes\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Dieta</CardTitle>\n            <UtensilsCrossed className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-calorias-dashboard\">\n              {totalCalorias} kcal\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Total de calorias hoje\n            </p>\n            <Link href=\"/dieta\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mt-4 w-full\" data-testid=\"link-dieta\">\n                Ver detalhes\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Agenda</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-tarefas-dashboard\">\n              {tasksPendentes}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Tarefas pendentes\n            </p>\n            <Link href=\"/agenda\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mt-4 w-full\" data-testid=\"link-agenda\">\n                Ver detalhes\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Estudos</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-estudos-dashboard\">\n              {progressoEstudos}%\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Progresso médio ({studies.length} estudos)\n            </p>\n            <Link href=\"/estudos\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mt-4 w-full\" data-testid=\"link-estudos\">\n                Ver detalhes\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Bem-vindo ao seu gerenciador de vida pessoal</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-muted-foreground\">\n            Use a barra lateral para navegar entre os diferentes módulos e começar a\n            organizar sua vida. Você pode adicionar transações financeiras, registrar\n            treinos, planejar sua dieta, gerenciar tarefas e acompanhar seus estudos.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Módulos Disponíveis:</h3>\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                <li>• Finanças - Controle de receitas e despesas</li>\n                <li>• Treinos - Registro de exercícios físicos</li>\n                <li>• Dieta - Planejamento de refeições</li>\n                <li>• Agenda - Gestão de tarefas e compromissos</li>\n                <li>• Estudos - Acompanhamento de cursos e aprendizado</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Começando:</h3>\n              <ul className=\"space-y-1 text-sm text-muted-foreground\">\n                <li>1. Escolha um módulo na barra lateral</li>\n                <li>2. Clique em \"Novo\" ou \"Adicionar\" para criar um item</li>\n                <li>3. Preencha os dados e salve</li>\n                <li>4. Edite ou exclua quando necessário</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7960},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"attached_assets/agenda_1761510896237_1761521574328.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Calendar as CalendarIcon, Clock, CheckCircle2, Circle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useUser } from \"@/hooks/use-user\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport type { Task, Note } from \"@shared/schema\";\n\nexport default function Agenda() {\n  const { userId } = useUser();\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const today = format(new Date(), \"d 'de' MMMM\", { locale: ptBR });\n  const todayDate = new Date().toISOString().split('T')[0];\n\n  // Fetch tasks and notes from backend\n  const { data: allTasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [`/api/tasks?userId=${userId}`],\n  });\n\n  const { data: notes = [], isLoading: notesLoading } = useQuery<Note[]>({\n    queryKey: [`/api/notes?userId=${userId}`],\n  });\n\n  // Filter tasks for today\n  const todayTasks = allTasks.filter((task) => {\n    if (!task.date) return false;\n    return task.date === todayDate;\n  });\n\n  const completedTodayTasks = todayTasks.filter((t) => t.completed).length;\n  const pendingTasks = allTasks.filter((t) => !t.completed).length;\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">Agenda</h1>\n            <p className=\"text-muted-foreground\">\n              Organize suas tarefas, compromissos e anotações\n            </p>\n          </div>\n          <Button data-testid=\"button-add-task\">\n            <Plus className=\"h-4 w-4\" />\n            Nova Tarefa\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"today\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-lg grid-cols-3\">\n            <TabsTrigger value=\"today\" data-testid=\"tab-today\">\n              Hoje\n            </TabsTrigger>\n            <TabsTrigger value=\"calendar\" data-testid=\"tab-calendar\">\n              Calendário\n            </TabsTrigger>\n            <TabsTrigger value=\"notes\" data-testid=\"tab-notes\">\n              Anotações\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"today\" className=\"space-y-4 mt-6\">\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Tarefas Hoje</CardTitle>\n                  <Circle className=\"h-4 w-4 text-chart-4\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{todayTasks.length}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {todayTasks.length > 0 ? `${todayTasks.length} tarefa${todayTasks.length > 1 ? 's' : ''} agendada${todayTasks.length > 1 ? 's' : ''}` : \"Nenhuma tarefa agendada\"}\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Concluídas</CardTitle>\n                  <CheckCircle2 className=\"h-4 w-4 text-chart-2\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-chart-2\">{completedTodayTasks}</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {todayTasks.length > 0 ? `${Math.round((completedTodayTasks / todayTasks.length) * 100)}% das tarefas` : \"0% das tarefas\"}\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Próximo Evento</CardTitle>\n                  <Clock className=\"h-4 w-4 text-chart-3\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">--:--</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Sem eventos próximos\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between flex-wrap gap-4\">\n                  <div>\n                    <CardTitle>Timeline do Dia</CardTitle>\n                    <CardDescription className=\"capitalize\">\n                      {today}\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Badge variant=\"secondary\">{todayTasks.length - completedTodayTasks} pendentes</Badge>\n                    <Badge variant=\"secondary\">{completedTodayTasks} concluídas</Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-64 border-2 border-dashed rounded-lg\">\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Nenhuma tarefa agendada para hoje\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-first-task\">\n                      <Plus className=\"h-4 w-4\" />\n                      Adicionar Primeira Tarefa\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"calendar\" className=\"space-y-4 mt-6\">\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Calendário</CardTitle>\n                  <CardDescription>\n                    Selecione uma data para ver as tarefas\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"flex justify-center\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={setSelectedDate}\n                    className=\"rounded-md border\"\n                    locale={ptBR}\n                  />\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>\n                    {selectedDate ? format(selectedDate, \"d 'de' MMMM\", { locale: ptBR }) : \"Selecione uma data\"}\n                  </CardTitle>\n                  <CardDescription>\n                    Tarefas e eventos agendados\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n                    <p className=\"text-sm\">Nenhuma tarefa para esta data</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"notes\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between flex-wrap gap-4\">\n                  <span>Minhas Anotações</span>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-note\">\n                    <Plus className=\"h-4 w-4\" />\n                    Nova Anotação\n                  </Button>\n                </CardTitle>\n                <CardDescription>\n                  Guarde ideias, lembretes e informações importantes\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-64 border-2 border-dashed rounded-lg\">\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Nenhuma anotação criada ainda\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-first-note\">\n                      <Plus className=\"h-4 w-4\" />\n                      Criar Primeira Anotação\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9106},"attached_assets/index_1761510831128_1761521547992.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 217 91% 42%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 15% 88%;\n\n  --sidebar-accent-foreground: 217 30% 20%;\n\n  --sidebar-ring: 217 91% 42%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 217 91% 42%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 0 0% 15%;\n\n  --muted: 217 8% 90%;\n\n  --muted-foreground: 217 12% 32%;\n\n  --accent: 217 12% 88%;\n\n  --accent-foreground: 217 20% 24%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 78%;\n  --ring: 217 91% 42%;\n  --chart-1: 217 91% 42%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 65% 48%;\n  --chart-5: 12 76% 61%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.12), 0px 3px 6px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.15), 0px 4px 8px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.18), 0px 8px 12px -6px hsl(0 0% 0% / 0.12);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.22);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 217 91% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 12% 18%;\n\n  --sidebar-accent-foreground: 217 25% 85%;\n\n  --sidebar-ring: 217 91% 45%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 217 91% 48%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 18%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 217 8% 16%;\n\n  --muted-foreground: 217 12% 75%;\n\n  --accent: 217 10% 18%;\n\n  --accent-foreground: 217 15% 85%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 28%;\n  --ring: 217 91% 48%;\n  --chart-1: 217 91% 58%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 280 65% 68%;\n  --chart-5: 12 76% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.45), 0px 2px 4px -2px hsl(0 0% 0% / 0.3);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.5), 0px 3px 6px -3px hsl(0 0% 0% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.6), 0px 4px 8px -4px hsl(0 0% 0% / 0.4);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.7), 0px 8px 12px -6px hsl(0 0% 0% / 0.5);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.8);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Utility classes for monospace numbers (financial data, calculator results) */\n  .font-mono-numbers {\n    font-family: var(--font-mono);\n    font-variant-numeric: tabular-nums;\n  }\n\n  /* Smooth transitions for all interactive elements */\n  .transition-smooth {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}","size_bytes":11260},"attached_assets/design_guidelines_1761521290430.md":{"content":"# Design Guidelines: Aplicação de Gerenciamento Pessoal\n\n## Design Approach\n\n**Selected Framework**: Linear + Notion Hybrid System  \nModern productivity application design focusing on clean data presentation, efficient workflows, and contextual AI assistance. Emphasis on clarity, hierarchy, and rapid information access.\n\n**Core Principles**:\n- Information density without clutter\n- Instant access to all modules\n- Contextual bot assistance omnipresence\n- Data visualization clarity\n- Mobile-responsive layouts\n\n---\n\n## Typography System\n\n**Font Families**:\n- Primary: Inter (via Google Fonts CDN)\n- Monospace: JetBrains Mono (for numbers, data, code in estudos section)\n\n**Type Scale**:\n- Hero/Module Headers: text-4xl, font-bold (36px)\n- Section Titles: text-2xl, font-semibold (24px)\n- Card Headers: text-lg, font-medium (18px)\n- Body Text: text-base, font-normal (16px)\n- Secondary/Meta: text-sm, font-normal (14px)\n- Data Labels: text-xs, font-medium, uppercase, tracking-wide (12px)\n\n**Emphasis Patterns**:\n- Numbers/Metrics: font-semibold, text-2xl to text-4xl (JetBrains Mono)\n- Button Text: font-medium, text-sm\n- Navigation: font-medium, text-sm\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16  \n(p-2, m-4, gap-6, space-y-8, py-12, mt-16)\n\n**Container Strategy**:\n- Sidebar: Fixed width 280px (w-70)\n- Main Content: max-w-7xl with px-6 md:px-8\n- Module Cards: max-w-6xl\n- Forms: max-w-2xl\n- Bot Panel: Fixed 360px (w-90) when expanded\n\n**Grid Patterns**:\n- Dashboard Overview: grid-cols-1 md:grid-cols-2 lg:grid-cols-3, gap-6\n- Data Tables: Full width with horizontal scroll\n- Calendar Views: Full width 7-column grid\n- Study Materials: grid-cols-1 lg:grid-cols-2, gap-8\n\n**Vertical Rhythm**:\n- Section spacing: space-y-8\n- Card internal padding: p-6\n- Form field spacing: space-y-4\n- List item spacing: space-y-2\n\n---\n\n## Navigation & Layout Structure\n\n**Primary Navigation**: Left sidebar (desktop) / Bottom tab bar (mobile)\n- Logo/App Name at top\n- User profile section with avatar\n- Module icons with labels: Dashboard, Treinos, Dieta, Finanças, Agenda, Estudos\n- Settings at bottom\n- Sidebar collapses to icon-only on tablet\n\n**Bot Assistant**: Floating button (bottom-right) + expandable panel\n- Persistent across all pages\n- Toggle button: 56px circle with chat icon\n- Expanded panel: Slides from right, 360px width, full height\n- Panel includes: contextual greeting, chat history, input field, quick actions\n- Position: fixed, bottom-8, right-8\n\n**Header Bar** (top of main content):\n- Breadcrumb navigation (Home > Module > Subpage)\n- Search bar (global, center-aligned)\n- Notifications icon\n- Quick add button (+ icon with dropdown for common actions)\n\n---\n\n## Component Library\n\n### Form Components\n- Dialog overlays for create/edit actions\n- Label above input: text-sm, font-medium, mb-2\n- Input fields: h-12, px-4, rounded-lg, border\n- Focus states: ring treatment\n- Error states: border treatment + text-sm error message below\n- Multi-column forms: grid-cols-2 gap-6 on desktop\n- Submit buttons: Primary CTA, full-width on mobile\n\n### Dashboard & Metric Cards\n- Elevated card style with rounded-2xl borders\n- Large number display: text-2xl to text-4xl, font-bold, JetBrains Mono\n- Icon in top-right corner (24px, colored)\n- Padding: p-6\n- Grid layout: 3 columns desktop, 2 tablet, 1 mobile\n\n### Data Tables & Lists\n- Sticky header row\n- Alternating row treatment for readability\n- Action buttons at row end (icon buttons)\n- Responsive: horizontal scroll or card-based view on mobile\n\n### Calculator Components\n- Prominent positioning with two-column layout\n- Input form on left, results display on right\n- Large calculated values: text-4xl to text-5xl, JetBrains Mono\n- Breakdown tables below main result\n- Calculate button: Primary CTA\n\n### Calendar Components\n- Monthly view: 7-column grid, day cells h-24, p-2\n- Current day: Bold border treatment\n- Event indicators: Colored dots or mini-badges\n- Timeline view: Vertical with hour markers\n- Event cards: Time range, title, category badge\n\n### Study Material Cards\n- Image/icon at top (120px height)\n- Title: text-lg, font-semibold, line-clamp-2\n- Category badge: small pill shape\n- Meta info: difficulty level, duration\n- CTA button at bottom: \"Acessar Conteúdo\"\n- Hover effect: subtle elevation\n\n### Bot Chat Interface\n- User messages: rounded-2xl, right-aligned, max-w-80%\n- Bot messages: rounded-2xl, left-aligned, max-w-80%\n- Avatar: 32px circle (user photo vs bot icon)\n- Timestamp: text-xs below each message\n- Multi-line textarea input: min-h-12, max-h-32\n\n---\n\n## Responsive Breakpoints\n\n**Mobile** (< 768px):\n- Sidebar hidden, bottom tab navigation (5 icons)\n- Bot panel: Full-screen overlay\n- Single column layouts\n- Tables: Card-based view\n- Metrics: 2 columns maximum\n\n**Tablet** (768px - 1024px):\n- Sidebar: Icon-only (64px wide)\n- 2-column grids\n- Bot panel: 320px width\n- Reduced padding: px-6\n\n**Desktop** (> 1024px):\n- Full sidebar with labels\n- 3-column grids where applicable\n- Bot panel: 360px width\n- Standard padding: px-8\n\n---\n\n## Microinteractions (Minimal Use)\n\n**Essential Only**:\n- Button hover: subtle scale (scale-105) - 150ms\n- Card hover: slight shadow increase - 200ms\n- Input focus: ring appearance - instant\n- Navigation active state: indicator slide - 300ms\n- Panel slide animations: 300ms ease-out\n\n**Loading States**:\n- Skeleton screens for data tables and cards\n- Spinner for form submissions (inside button)\n- Shimmer effect for card loading\n\n---\n\n## Accessibility\n\n- All interactive elements: min-h-12 touch target\n- Form labels: explicitly associated with inputs\n- Icon buttons: aria-label attributes\n- Keyboard navigation: visible focus states throughout\n- Screen reader: semantic HTML, ARIA landmarks\n- Contrast ratios: maintain WCAG AA minimum\n- Skip to main content link at top\n\n---\n\n## Images\n\n**Dashboard Module Cards**: 24px Heroicons for each section (outline style)  \n**Study Material Thumbnails**: 16:9 placeholder images for courses/videos (120px height)  \n**User Avatar**: 40px circle in sidebar, 32px in bot messages  \n**Empty States**: Simple SVG illustrations for empty lists (max 200px width)  \n\n**No large hero images** - this is a data-focused productivity application prioritizing information density and functionality over marketing aesthetics.","size_bytes":6328},"attached_assets/routes_1761507822900_1761510774300_1761521527028.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { getChatResponse } from \"./openai\";\nimport { z } from \"zod\";\nimport { \n  insertWorkoutSchema, \n  insertExerciseSchema,\n  insertWorkoutLogSchema,\n  insertFoodItemSchema,\n  insertMealSchema,\n  insertNutritionProfileSchema,\n  insertTransactionSchema,\n  insertTaskSchema,\n  insertNoteSchema,\n  insertStudyMaterialSchema,\n  insertUserProgressSchema,\n  insertChatMessageSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // ============================================================================\n  // Auth routes\n  // ============================================================================\n  \n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // ============================================================================\n  // Dashboard\n  // ============================================================================\n  \n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // ============================================================================\n  // Workouts\n  // ============================================================================\n  \n  app.get('/api/workouts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const workouts = await storage.getWorkouts(userId);\n      res.json(workouts);\n    } catch (error) {\n      console.error(\"Error fetching workouts:\", error);\n      res.status(500).json({ message: \"Failed to fetch workouts\" });\n    }\n  });\n\n  app.post('/api/workouts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertWorkoutSchema.parse(req.body);\n      const workout = await storage.createWorkout({ ...validatedData, userId });\n      res.json(workout);\n    } catch (error: any) {\n      console.error(\"Error creating workout:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create workout\" });\n    }\n  });\n\n  app.get('/api/workouts/:workoutId/exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const { workoutId } = req.params;\n      const exercises = await storage.getExercises(workoutId);\n      res.json(exercises);\n    } catch (error) {\n      console.error(\"Error fetching exercises:\", error);\n      res.status(500).json({ message: \"Failed to fetch exercises\" });\n    }\n  });\n\n  app.post('/api/exercises', isAuthenticated, async (req: any, res) => {\n    try {\n      const validatedData = insertExerciseSchema.parse(req.body);\n      const exercise = await storage.createExercise(validatedData);\n      res.json(exercise);\n    } catch (error: any) {\n      console.error(\"Error creating exercise:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create exercise\" });\n    }\n  });\n\n  app.get('/api/workout-logs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { exerciseId } = req.query;\n      const logs = await storage.getWorkoutLogs(userId, exerciseId as string);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching workout logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch logs\" });\n    }\n  });\n\n  app.post('/api/workout-logs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertWorkoutLogSchema.parse(req.body);\n      const log = await storage.createWorkoutLog({ ...validatedData, userId });\n      res.json(log);\n    } catch (error: any) {\n      console.error(\"Error creating workout log:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create log\" });\n    }\n  });\n\n  // ============================================================================\n  // Diet\n  // ============================================================================\n  \n  app.get('/api/foods', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const foods = await storage.getFoodItems(userId);\n      res.json(foods);\n    } catch (error) {\n      console.error(\"Error fetching foods:\", error);\n      res.status(500).json({ message: \"Failed to fetch foods\" });\n    }\n  });\n\n  app.post('/api/foods', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertFoodItemSchema.parse(req.body);\n      const food = await storage.createFoodItem({ ...validatedData, userId });\n      res.json(food);\n    } catch (error: any) {\n      console.error(\"Error creating food:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create food\" });\n    }\n  });\n\n  app.get('/api/meals/today', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const today = new Date().toISOString().split('T')[0];\n      const meals = await storage.getMeals(userId, today);\n      res.json(meals);\n    } catch (error) {\n      console.error(\"Error fetching meals:\", error);\n      res.status(500).json({ message: \"Failed to fetch meals\" });\n    }\n  });\n\n  app.get('/api/meals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { date } = req.query;\n      const meals = await storage.getMeals(userId, date as string);\n      res.json(meals);\n    } catch (error) {\n      console.error(\"Error fetching meals:\", error);\n      res.status(500).json({ message: \"Failed to fetch meals\" });\n    }\n  });\n\n  app.post('/api/meals', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertMealSchema.parse(req.body);\n      const meal = await storage.createMeal({ ...validatedData, userId });\n      res.json(meal);\n    } catch (error: any) {\n      console.error(\"Error creating meal:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create meal\" });\n    }\n  });\n\n  app.get('/api/nutrition/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getNutritionProfile(userId);\n      res.json(profile || null);\n    } catch (error) {\n      console.error(\"Error fetching nutrition profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post('/api/nutrition/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertNutritionProfileSchema.parse(req.body);\n      const profile = await storage.upsertNutritionProfile({ ...validatedData, userId });\n      res.json(profile);\n    } catch (error: any) {\n      console.error(\"Error saving nutrition profile:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to save profile\" });\n    }\n  });\n\n  // ============================================================================\n  // Finance\n  // ============================================================================\n  \n  app.get('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const transactions = await storage.getTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction({ ...validatedData, userId });\n      res.json(transaction);\n    } catch (error: any) {\n      console.error(\"Error creating transaction:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create transaction\" });\n    }\n  });\n\n  app.get('/api/transactions/summary', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const summary = await storage.getTransactionsSummary(userId);\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching summary:\", error);\n      res.status(500).json({ message: \"Failed to fetch summary\" });\n    }\n  });\n\n  // ============================================================================\n  // Agenda\n  // ============================================================================\n  \n  app.get('/api/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const tasks = await storage.getTasks(userId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post('/api/tasks', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask({ ...validatedData, userId });\n      res.json(task);\n    } catch (error: any) {\n      console.error(\"Error creating task:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.patch('/api/tasks/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.updateTask(id, req.body);\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.get('/api/notes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const notes = await storage.getNotes(userId);\n      res.json(notes);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      res.status(500).json({ message: \"Failed to fetch notes\" });\n    }\n  });\n\n  app.post('/api/notes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertNoteSchema.parse(req.body);\n      const note = await storage.createNote({ ...validatedData, userId });\n      res.json(note);\n    } catch (error: any) {\n      console.error(\"Error creating note:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create note\" });\n    }\n  });\n\n  // ============================================================================\n  // Study Materials\n  // ============================================================================\n  \n  app.get('/api/study-materials', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const materials = await storage.getStudyMaterials(userId);\n      res.json(materials);\n    } catch (error) {\n      console.error(\"Error fetching study materials:\", error);\n      res.status(500).json({ message: \"Failed to fetch materials\" });\n    }\n  });\n\n  app.post('/api/study-materials', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertStudyMaterialSchema.parse(req.body);\n      const material = await storage.createStudyMaterial({ ...validatedData, userId: req.body.isGlobal ? undefined : userId });\n      res.json(material);\n    } catch (error: any) {\n      console.error(\"Error creating study material:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create material\" });\n    }\n  });\n\n  app.get('/api/study-progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { materialId } = req.query;\n      const progress = await storage.getUserProgress(userId, materialId as string);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  app.post('/api/study-progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertUserProgressSchema.parse(req.body);\n      const progress = await storage.upsertUserProgress({ ...validatedData, userId });\n      res.json(progress);\n    } catch (error: any) {\n      console.error(\"Error saving progress:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to save progress\" });\n    }\n  });\n\n  // ============================================================================\n  // Chat (Bot Assistente)\n  // ============================================================================\n  \n  app.get('/api/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { context } = req.query;\n      const messages = await storage.getChatMessages(userId, context as string);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching chat messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertChatMessageSchema.parse(req.body);\n      \n      // Salvar mensagem do usuário\n      await storage.createChatMessage({ \n        role: \"user\", \n        content: validatedData.content,\n        context: validatedData.context,\n        userId \n      });\n\n      // Buscar histórico\n      const chatHistory = await storage.getChatMessages(userId, validatedData.context || undefined);\n      \n      // Obter resposta do bot\n      const botResponse = await getChatResponse(\n        validatedData.content,\n        validatedData.context || \"Dashboard\",\n        chatHistory.map(m => ({ role: m.role, content: m.content }))\n      );\n\n      // Salvar resposta do bot\n      const assistantMessage = await storage.createChatMessage({\n        role: \"assistant\",\n        content: botResponse,\n        context: validatedData.context,\n        userId\n      });\n\n      res.json(assistantMessage);\n    } catch (error: any) {\n      console.error(\"Error processing chat:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to process message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16714},"attached_assets/index_1761510881690_1761521547993.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"attached_assets/seed_1761507822900_1761510774298_1761521527029.ts":{"content":"import { db } from \"./db\";\nimport { studyMaterials } from \"@shared/schema\";\n\nconst seedMaterials = [\n  // Python - Iniciante\n  {\n    title: \"Python para Iniciantes - Curso Completo\",\n    description: \"Aprenda Python do zero com este curso completo e gratuito. Cobre variáveis, estruturas de controle, funções e mais.\",\n    url: \"https://www.youtube.com/watch?v=S9uPNppGsGo\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Vídeo\",\n    isFree: true,\n    userId: null,\n  },\n  {\n    title: \"Documentação Oficial Python\",\n    description: \"Tutorial oficial do Python, perfeito para iniciantes que preferem aprender lendo.\",\n    url: \"https://docs.python.org/pt-br/3/tutorial/\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Documentação\",\n    isFree: true,\n    userId: null,\n  },\n  {\n    title: \"Exercícios de Python - HackerRank\",\n    description: \"Pratique Python com exercícios interativos do básico ao avançado.\",\n    url: \"https://www.hackerrank.com/domains/python\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n    userId: null,\n  },\n  \n  // JavaScript - Iniciante\n  {\n    title: \"JavaScript Moderno - Curso Gratuito\",\n    description: \"Aprenda JavaScript moderno (ES6+) do zero. Ideal para iniciantes.\",\n    url: \"https://javascript.info/\",\n    subject: \"JavaScript\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n    userId: null,\n  },\n  {\n    title: \"Fundamentos de JavaScript - MDN\",\n    description: \"Guia completo da Mozilla sobre JavaScript, desde o básico.\",\n    url: \"https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript\",\n    subject: \"JavaScript\",\n    level: \"Iniciante\",\n    type: \"Documentação\",\n    isFree: true,\n    userId: null,\n  },\n  \n  // Web Development - Iniciante\n  {\n    title: \"HTML & CSS - Curso Completo\",\n    description: \"Aprenda a criar páginas web do zero com HTML e CSS.\",\n    url: \"https://www.youtube.com/watch?v=Ejkb_YpuHWs\",\n    subject: \"Web Development\",\n    level: \"Iniciante\",\n    type: \"Vídeo\",\n    isFree: true,\n    userId: null,\n  },\n  {\n    title: \"FreeCodeCamp - Web Design Responsivo\",\n    description: \"Certificação gratuita em design web responsivo com projetos práticos.\",\n    url: \"https://www.freecodecamp.org/learn/2022/responsive-web-design/\",\n    subject: \"Web Development\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n    userId: null,\n  },\n  {\n    title: \"The Odin Project\",\n    description: \"Currículo completo e gratuito para se tornar desenvolvedor web full-stack.\",\n    url: \"https://www.theodinproject.com/\",\n    subject: \"Web Development\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n    userId: null,\n  },\n  \n  // Programação Geral - Iniciante\n  {\n    title: \"CS50 - Introdução à Ciência da Computação\",\n    description: \"Curso introdutório de Harvard sobre ciência da computação. Legendado em português.\",\n    url: \"https://cs50.harvard.edu/x/\",\n    subject: \"Programação Geral\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n    userId: null,\n  },\n  {\n    title: \"Lógica de Programação - Curso Completo\",\n    description: \"Aprenda lógica de programação antes de mergulhar em linguagens específicas.\",\n    url: \"https://www.youtube.com/watch?v=8mei6uVttho\",\n    subject: \"Programação Geral\",\n    level: \"Iniciante\",\n    type: \"Vídeo\",\n    isFree: true,\n    userId: null,\n  },\n  \n  // Python - Intermediário\n  {\n    title: \"Python Orientado a Objetos\",\n    description: \"Aprofunde-se em POO com Python: classes, herança, polimorfismo e mais.\",\n    url: \"https://realpython.com/python3-object-oriented-programming/\",\n    subject: \"Python\",\n    level: \"Intermediário\",\n    type: \"Artigo\",\n    isFree: true,\n    userId: null,\n  },\n  \n  // JavaScript - Intermediário\n  {\n    title: \"JavaScript Assíncrono\",\n    description: \"Domine Promises, async/await e programação assíncrona em JavaScript.\",\n    url: \"https://javascript.info/async\",\n    subject: \"JavaScript\",\n    level: \"Intermediário\",\n    type: \"Artigo\",\n    isFree: true,\n    userId: null,\n  },\n  \n  // Web Development - Intermediário\n  {\n    title: \"React - Documentação Oficial\",\n    description: \"Aprenda React, a biblioteca JavaScript mais popular para interfaces de usuário.\",\n    url: \"https://react.dev/learn\",\n    subject: \"Web Development\",\n    level: \"Intermediário\",\n    type: \"Documentação\",\n    isFree: true,\n    userId: null,\n  },\n];\n\nasync function seed() {\n  console.log(\"🌱 Iniciando seed de materiais de estudo...\");\n  \n  try {\n    for (const material of seedMaterials) {\n      await db.insert(studyMaterials).values(material);\n    }\n    \n    console.log(`✅ ${seedMaterials.length} materiais de estudo adicionados com sucesso!`);\n  } catch (error) {\n    console.error(\"❌ Erro ao fazer seed:\", error);\n    throw error;\n  }\n}\n\n// Executar seed\nseed().then(() => {\n  console.log(\"🎉 Seed concluído!\");\n  process.exit(0);\n}).catch((error) => {\n  console.error(\"Falha no seed:\", error);\n  process.exit(1);\n});\n","size_bytes":5043},"attached_assets/not-found_1761510896236_1761521547997.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"attached_assets/App_1761510831128_1761521574329.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { BotAssistant } from \"@/components/bot-assistant\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport Workouts from \"@/pages/workouts\";\nimport Diet from \"@/pages/diet\";\nimport Finance from \"@/pages/finance\";\nimport Agenda from \"@/pages/agenda\";\nimport Study from \"@/pages/study\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/workouts\" component={Workouts} />\n      <Route path=\"/diet\" component={Diet} />\n      <Route path=\"/finance\" component={Finance} />\n      <Route path=\"/agenda\" component={Agenda} />\n      <Route path=\"/study\" component={Study} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header className=\"flex items-center justify-between gap-2 p-4 border-b sticky top-0 z-10 bg-background\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </header>\n                <main className=\"flex-1 overflow-hidden\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n            <BotAssistant />\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2280},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"attached_assets/not-found_1761521597273.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"attached_assets/replit_1761521290424.md":{"content":"# Personal Management Application\n\n## Overview\n\nA comprehensive personal management system built with React, Express, and PostgreSQL. This full-stack application helps users manage workouts, diet/nutrition, finances, schedules, and study materials. The system features a modern, clean UI inspired by Linear and Notion design patterns, with emphasis on data clarity and efficient workflows.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with Vite as the build tool and development server.\n\n**Routing**: Wouter for client-side routing, providing a lightweight alternative to React Router.\n\n**State Management**: TanStack Query v5 for server state management with built-in caching, invalidation, and background refetching.\n\n**UI Components**: Shadcn/ui component library built on Radix UI primitives, providing accessible, unstyled components that are customized with Tailwind CSS.\n\n**Styling**: Tailwind CSS with custom design tokens defined in CSS variables, supporting both light and dark themes. Typography uses Inter for UI text and JetBrains Mono for numerical data.\n\n**Design System**: Custom design guidelines document specifies spacing primitives, type scales, container strategies, and component patterns following Linear + Notion hybrid approach.\n\n**Form Handling**: React Hook Form with Zod validation for type-safe form management.\n\n**Module Structure**: Six main functional modules accessible via sidebar navigation:\n- Dashboard (aggregated statistics)\n- Finances (income/expense tracking)\n- Workouts (exercise logging)\n- Diet (meal and nutrition tracking)\n- Agenda (task management)\n- Studies (learning resource organization)\n\n### Backend Architecture\n\n**Server Framework**: Express.js running on Node.js with TypeScript.\n\n**API Design**: RESTful API endpoints organized by resource type with standard CRUD operations (GET, POST, PUT, DELETE).\n\n**Request Processing**: Custom middleware for JSON parsing, URL encoding, and request/response logging with execution time tracking.\n\n**Development Server**: Vite middleware integration for HMR (Hot Module Replacement) in development mode, with production serving of static built assets.\n\n**Type Safety**: Shared schema definitions between frontend and backend using Zod for runtime validation and TypeScript for compile-time type checking.\n\n**Storage Layer**: Abstract storage interface (IStorage) defining contracts for all data operations, enabling future database implementation.\n\n**Current Implementation**: In-memory storage with Map-based data structures (temporary implementation pending database integration).\n\n### Data Storage Architecture\n\n**Database**: PostgreSQL via Neon serverless platform.\n\n**ORM**: Drizzle ORM for type-safe database queries and schema management.\n\n**Connection**: Connection pooling via @neondatabase/serverless with WebSocket support for serverless environments.\n\n**Schema Design**: \n- Users table with authentication fields\n- Five domain tables (finances, workouts, meals, tasks, studies)\n- UUID primary keys generated via PostgreSQL gen_random_uuid()\n- Timestamp fields for created/updated tracking\n- Type-safe schema definitions using Drizzle's pgTable\n\n**Migrations**: Drizzle Kit for schema migrations with output to ./migrations directory.\n\n**Validation**: Dual-layer validation using Zod schemas (runtime) and TypeScript types (compile-time), generated from Drizzle schema using drizzle-zod.\n\n### Authentication & Session Management\n\n**Note**: The codebase includes references to Replit Auth integration but currently uses a temporary mock user system for development. The architecture supports future Replit Auth implementation with:\n- OpenID Connect discovery\n- Passport.js strategy integration\n- PostgreSQL session storage\n- User profile synchronization\n\n## External Dependencies\n\n### Database & ORM\n- **PostgreSQL** (Neon serverless): Primary database\n- **Drizzle ORM** (v0.39.1): Type-safe database queries\n- **@neondatabase/serverless** (v0.10.4): Serverless PostgreSQL client\n- **drizzle-zod** (v0.7.0): Zod schema generation from Drizzle schemas\n\n### Frontend Libraries\n- **React** (v18+): UI library\n- **Vite**: Build tool and dev server\n- **Wouter**: Lightweight routing\n- **TanStack Query** (v5.60.5): Server state management\n- **React Hook Form** (v7+): Form management\n- **Zod**: Schema validation\n- **date-fns** (v3.6.0): Date manipulation and formatting\n\n### UI Components & Styling\n- **Radix UI**: Unstyled accessible components (17 component packages)\n- **Tailwind CSS** (v3+): Utility-first CSS framework\n- **class-variance-authority** (v0.7.1): Component variant management\n- **cmdk** (v1.1.1): Command menu component\n\n### Backend Services\n- **Express**: Web server framework\n- **connect-pg-simple** (v10.0.0): PostgreSQL session store\n- **OpenID Client**: OAuth/OIDC authentication (pending implementation)\n\n### Development Tools\n- **TypeScript**: Type safety across stack\n- **ESBuild**: Production bundling\n- **tsx**: TypeScript execution for development\n- **@replit/vite-plugin-***: Replit-specific development plugins","size_bytes":5147},"attached_assets/queryClient_1761510901289_1761521547989.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 9%;\n\n  --border: 0 0% 89%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 9%;\n\n  --card-border: 0 0% 91%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 9%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 217 91% 35%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 217 10% 88%;\n\n  --sidebar-accent-foreground: 217 10% 20%;\n\n  --sidebar-ring: 217 91% 35%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 9%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 217 91% 35%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 0 0% 86%;\n\n  --secondary-foreground: 0 0% 9%;\n\n  --muted: 217 10% 90%;\n\n  --muted-foreground: 217 10% 30%;\n\n  --accent: 217 15% 88%;\n\n  --accent-foreground: 217 15% 15%;\n\n  --destructive: 0 84% 35%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 75%;\n  --ring: 217 91% 35%;\n  --chart-1: 217 91% 35%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 262 83% 38%;\n  --chart-4: 32 95% 44%;\n  --chart-5: 340 82% 40%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 11%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 14%;\n\n  --sidebar: 0 0% 13%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 17%;\n\n  --sidebar-primary: 217 91% 35%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 217 10% 18%;\n\n  --sidebar-accent-foreground: 217 10% 85%;\n\n  --sidebar-ring: 217 91% 35%;\n\n  --popover: 0 0% 15%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 19%;\n\n  --primary: 217 91% 35%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 0 0% 20%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 217 10% 17%;\n\n  --muted-foreground: 217 10% 75%;\n\n  --accent: 217 15% 19%;\n\n  --accent-foreground: 217 15% 90%;\n\n  --destructive: 0 84% 35%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 30%;\n  --ring: 217 91% 35%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 76% 65%;\n  --chart-3: 262 83% 70%;\n  --chart-4: 32 95% 65%;\n  --chart-5: 340 82% 68%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9256},"attached_assets/replit_1761510492028_1761521547990.md":{"content":"# Sistema de Gerenciamento Pessoal\n\n## Visão Geral\nSistema completo de gerenciamento pessoal com módulos de treinos, dieta/nutrição, finanças, agenda e estudos. Desenvolvido com React, Express, PostgreSQL e Drizzle ORM.\n\n## Estrutura do Projeto\n\n### Backend\n- **Database**: PostgreSQL (Neon) com Drizzle ORM\n- **API**: Express com rotas RESTful\n- **Storage**: DatabaseStorage com CRUD completo\n- **Seed**: 15 materiais de estudo de Python/JavaScript/Web\n\n### Frontend\n- **Framework**: React com Vite\n- **Routing**: Wouter\n- **State Management**: TanStack Query v5\n- **UI Components**: Shadcn/ui + Tailwind CSS\n- **Theme**: Dark/Light mode support\n\n## Módulos Implementados\n\n### 1. Dashboard\n- ✅ Conectado ao backend\n- ✅ Exibe estatísticas reais de todos os módulos\n- ✅ Loading states implementados\n- ⚠️ Falta: Atividades recentes dinâmicas\n\n### 2. Estudos (Study)\n- ✅ Conectado ao backend\n- ✅ Lista 15 materiais seedados (Python, JavaScript, Web Dev)\n- ✅ Filtros por categoria funcionando\n- ✅ Loading states com skeleton\n- ⚠️ Falta: Adicionar novos materiais (mutation)\n\n### 3. Dieta (Diet)\n- ✅ Conectado ao backend\n- ✅ Calculadora TDEE funcionando (Mifflin-St Jeor)\n- ✅ Salva perfil nutricional no backend\n- ✅ Mutation implementada com cache invalidation\n- ✅ Toast de sucesso\n- ⚠️ Falta: Adicionar/listar refeições\n\n### 4. Finanças (Finance)\n- ✅ Conectado ao backend\n- ✅ Calculadora financeira funcionando\n- ✅ Dicas automáticas baseadas em padrão de gastos\n- ✅ Regra 50/30/20 implementada\n- ⚠️ Falta: Adicionar/deletar transações (mutations)\n\n### 5. Treinos (Workouts)\n- ✅ Conectado ao backend\n- ⚠️ Falta: Criar/editar treinos (mutations)\n- ⚠️ Falta: Registrar séries e exercícios\n\n### 6. Agenda\n- ✅ Conectado ao backend\n- ✅ Exibe tarefas do dia\n- ⚠️ Falta: Adicionar/completar tarefas (mutations)\n- ⚠️ Falta: Adicionar notas\n\n## Estado Atual da Integração\n\n### ✅ Funcionando Corretamente\n1. **Backend completo:**\n   - Todas as tabelas criadas no PostgreSQL\n   - DatabaseStorage com métodos CRUD completos\n   - Todas as rotas API com validação Zod\n   - Seed data carregado com sucesso\n\n2. **Queries funcionando:**\n   - Todas as páginas buscam dados do backend corretamente\n   - TanStack Query configurado corretamente\n   - Query keys com parâmetros corretos\n   - Loading states parcialmente implementados\n\n3. **Calculadoras funcionando:**\n   - TDEE Calculator: calcula BMR, TDEE, macros e SALVA no backend ✓\n   - Finance Calculator: regra 50/30/20, meta de emergência ✓\n\n### ⚠️ Pendente / Em Desenvolvimento\n1. **Mutations (Create/Update/Delete):**\n   - Finance: Adicionar/deletar transações\n   - Workouts: Criar treinos, adicionar exercícios, registrar logs\n   - Agenda: Adicionar/completar tarefas, criar notas\n   - Diet: Adicionar/deletar refeições\n   - Study: Adicionar materiais personalizados\n\n2. **UX Polishing:**\n   - Loading states em todas as páginas\n   - Error states com toasts informativos\n   - Empty states elegantes\n   - Animações suaves\n\n3. **Autenticação:**\n   - Atualmente usando hook temporário `useUser` com userId mockado\n   - Próximo: Implementar Replit Auth\n   - Bot assistente ainda não implementado\n\n## Como Rodar\n\n```bash\n# O workflow \"Start application\" já está configurado\n# Ele executa: npm run dev\n# Backend: http://localhost:5000 (Express)\n# Frontend: http://localhost:5000 (Vite)\n```\n\n## Database Schema\n\n### Core Tables\n- `users` - Usuários do sistema\n- `workouts` - Programas de treino\n- `exercises` - Exercícios de cada treino\n- `workoutLogs` - Histórico de treinos completados\n- `foodItems` - Biblioteca de alimentos\n- `meals` - Refeições registradas\n- `nutritionProfile` - Perfil nutricional (TDEE, macros)\n- `transactions` - Transações financeiras\n- `tasks` - Tarefas da agenda\n- `notes` - Anotações\n- `studyMaterials` - Materiais de estudo\n- `userProgress` - Progresso em materiais\n- `chatMessages` - Mensagens do bot assistente\n\n## Tecnologias\n\n- **Frontend**: React, TypeScript, Vite, Wouter, TanStack Query, Shadcn/ui, Tailwind CSS\n- **Backend**: Express, TypeScript, Drizzle ORM\n- **Database**: PostgreSQL (Neon)\n- **Validation**: Zod\n- **Date Handling**: date-fns\n- **Icons**: Lucide React\n\n## Próximos Passos\n\n### Prioridade Alta\n1. Implementar mutations restantes (create/update/delete)\n2. Adicionar error handling consistente com toasts\n3. Completar loading/empty states em todas as páginas\n4. Implementar Replit Auth para substituir hook temporário\n\n### Prioridade Média\n5. Implementar bot assistente persistente\n6. Adicionar gráficos e visualizações\n7. Implementar filtros e buscas avançadas\n8. Adicionar funcionalidade de export/import\n\n### Prioridade Baixa\n9. Implementar notificações/lembretes\n10. Adicionar gamificação/achievements\n11. PWA features (offline mode)\n12. Testes end-to-end completos\n\n## Design Guidelines\n\nO projeto segue os guidelines em `design_guidelines.md`:\n- Linear/Notion aesthetic\n- Inter font para textos, JetBrains Mono para código\n- Dark/light mode support\n- Minimal, clean interface\n- Consistent spacing e typography\n- Hover states e animations suaves\n\n## User Preferences\n\n- Interface em Português Brasileiro\n- Focus em recursos gratuitos para estudo\n- Calculadoras devem salvar resultados\n- Dicas automáticas baseadas em padrões\n- Bot assistente sem IA (regras pre-programadas)\n\n## Database Commands\n\n```bash\n# Push schema changes to database\nnpm run db:push\n\n# Force push (when there are conflicts)\nnpm run db:push --force\n\n# Seed database with study materials\nnpx tsx server/seed.ts\n```\n\n## Recent Changes (2025-10-26)\n\n- ✅ Implementado backend completo com PostgreSQL\n- ✅ Todas as rotas API criadas\n- ✅ Frontend conectado ao backend via TanStack Query\n- ✅ Query keys corrigidas para passar parâmetros corretos\n- ✅ Calculadora TDEE salvando no backend\n- ✅ Loading states adicionados no Dashboard\n- ✅ 15 materiais de estudo seedados no banco\n- ⚠️ Mutations ainda não implementadas na maioria das páginas\n\n## Known Issues\n\n1. Mutations não implementadas: botões/formulários não fazem create/update/delete\n2. Loading states apenas parcialmente implementados\n3. Error handling inconsistente\n4. Hook `useUser` é temporário - precisa de Replit Auth real\n5. Bot assistente criado mas não integrado nas páginas\n","size_bytes":6361},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"attached_assets/postcss.config_1761521290434.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"attached_assets/design_guidelines_1761510492028_1761521565028.md":{"content":"# Design Guidelines: Aplicação de Gerenciamento Pessoal Completa\n\n## Design Approach\n\n**Selected Framework**: Linear + Notion Hybrid System  \nModern productivity application emphasizing data clarity, efficient workflows, and persistent AI assistance. Clean information architecture with contextual intelligence across all modules.\n\n**Core Design Principles**:\n- Persistent bot assistance visible on every page\n- Information density balanced with breathing room\n- Instant module access with clear visual hierarchy\n- Contextual intelligence per section\n- Mobile-first responsive design\n\n---\n\n## Typography System\n\n**Font Families**:\n- Primary: Inter (all UI text, labels, headings)\n- Monospace: JetBrains Mono (numbers, financial data, code snippets)\n\n**Type Scale**:\n- Page Headers: text-3xl md:text-4xl, font-bold\n- Section Titles: text-xl md:text-2xl, font-semibold\n- Card Headers: text-lg, font-medium\n- Body/Forms: text-base, font-normal\n- Labels/Meta: text-sm, font-medium\n- Captions: text-xs, font-medium, uppercase, tracking-wide\n\n**Special Typography**:\n- Calculator Results: text-4xl md:text-5xl, font-bold, JetBrains Mono\n- Financial Totals: text-3xl, font-semibold, JetBrains Mono\n- Macro Values: text-2xl, font-bold, JetBrains Mono\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Tailwind units of 2, 4, 6, 8, 12, 16\n- Component padding: p-4 to p-8\n- Section spacing: space-y-6 to space-y-12\n- Grid gaps: gap-4 to gap-8\n\n**Container Strategy**:\n- Sidebar: Fixed 280px desktop, collapsed 64px tablet, hidden mobile\n- Main Content: max-w-7xl, px-4 md:px-6 lg:px-8\n- Bot Panel: Fixed 360px width, full height, slides from right\n- Calculator Panels: max-w-2xl centered\n- Calendar Views: Full width container\n\n**Grid Patterns**:\n- Dashboard Cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3, gap-6\n- Study Materials: grid-cols-1 md:grid-cols-2 lg:grid-cols-3, gap-6\n- Workout Programs: grid-cols-1 lg:grid-cols-2, gap-8\n- Financial Summary: grid-cols-1 md:grid-cols-3, gap-4\n\n---\n\n## Navigation & Global Layout\n\n**Primary Navigation** (Left Sidebar):\n- Logo/App title at top (text-xl, font-bold)\n- User avatar + name (40px circle, text-sm below)\n- Module navigation with icons (24px) + labels:\n  - Dashboard (home icon)\n  - Treinos (dumbbell icon)\n  - Dieta (apple/nutrition icon)\n  - Finanças (trending-up/chart icon)\n  - Agenda (calendar icon)\n  - Estudos (book/graduation-cap icon)\n- Settings gear icon at bottom\n- Active state: subtle background highlight + border-l-4 accent\n\n**Global Bot Assistant**:\n- Floating button: Fixed bottom-8 right-8, 56px circle with chat bubble icon\n- Pulse animation on button to indicate availability\n- Panel slides from right: 360px width, full viewport height\n- Panel header: Context title + minimize/close buttons\n- Quick actions row below header (3-4 contextual action chips)\n- Chat history scrollable area with alternating message bubbles\n- Input area at bottom: textarea + send button + attachment option\n\n**Top Header Bar**:\n- Breadcrumb navigation (text-sm, Home > Module > Page)\n- Global search bar (center, max-w-md)\n- Notification bell icon (with badge count if applicable)\n- Quick add dropdown (+ icon with menu)\n\n---\n\n## Component Library\n\n### Calculator Components (Diet & Finance)\n\n**TDEE Calculator Card**:\n- Prominent positioning at top of Dieta page\n- Two-column layout: Input form (left) + Results display (right)\n- Input fields: Weight (kg), Height (cm), Age, Sex (radio buttons), Activity Level (select dropdown)\n- Formula toggle: Mifflin-St Jeor / Harris-Benedict (tabs)\n- Calculate button: Primary CTA, full-width on mobile\n- Results panel: Large TDEE number (text-5xl), breakdown table below\n- Macro calculator integrated below with percentage sliders (Protein %, Carbs %, Fats %)\n\n**Financial Calculator Dashboard**:\n- Summary cards row: Total Entradas (green accent), Total Saídas (red accent), Saldo (neutral or green/red based on value)\n- Each card: Large number (text-3xl, JetBrains Mono), label below, percentage change badge\n- Monthly breakdown chart below summaries (bar chart for income vs expenses)\n- Category distribution pie chart (colorful segments)\n- Tips panel: Auto-generated suggestions based on spending patterns (bullet list with icons)\n\n### Calendar & Reminder Components\n\n**Monthly Calendar Grid**:\n- 7-column grid for days of week\n- Header row: Day names (text-xs, uppercase, tracking-wide)\n- Day cells: h-24 min height, p-2, border treatment\n- Current day: Bold border + subtle background\n- Event indicators: Colored dots or mini-badges (max 3 visible, +N more)\n- Hover state: Slight elevation with preview tooltip\n\n**Day Detail Timeline**:\n- Vertical timeline with hour markers (6am - 11pm)\n- Hour labels: text-xs, left-aligned\n- Event blocks: Positioned by time, colored by type (workout=blue, meal=green, reminder=yellow, task=purple)\n- Each event card: Time range, title, category badge, quick actions (edit/delete icons)\n\n**Reminder Cards**:\n- Title: text-base, font-medium\n- Description: text-sm, line-clamp-2\n- Date/Time: text-xs with clock icon\n- Priority indicator: Colored border-l-4 (high=red, medium=yellow, low=green)\n- Checkbox for completion state\n\n### Study Materials Components\n\n**Material Category Navigation**:\n- Left sidebar within Estudos page: Subject categories (Python, JavaScript, Web Dev, etc.)\n- Active category: Background highlight\n- Count badge showing material count per category\n\n**Material Cards**:\n- Thumbnail/icon area at top (16:9 ratio, 120px height)\n- Badge cluster: Type (Vídeo/Curso/Artigo), Level (Iniciante/Intermediário/Avançado), Free/Paid\n- Title: text-lg, font-semibold, line-clamp-2\n- Description: text-sm, line-clamp-3\n- Footer: External link button (\"Acessar Conteúdo\") + bookmark icon\n\n**Add Material Form**:\n- Modal overlay with backdrop-blur\n- Form fields: URL, Title, Description, Subject (select), Level (select), Type (select), Free checkbox\n- Preview panel on right showing parsed metadata\n- Save button: Primary CTA\n\n### Workout Organization Components\n\n**Workout Program Cards**:\n- Header: Program name (text-lg, font-semibold), type badge (Push/Pull/Legs, etc.)\n- Days grid: 7-day row showing which days are active (M T W T F S S with colored indicators)\n- Exercise count: \"12 exercises across 5 days\"\n- Action buttons: View Details, Edit, Duplicate (icon buttons)\n\n**Exercise Library Browser**:\n- Filter chips row: Muscle group filters (Peito, Costas, Pernas, Ombros, Braços, Core)\n- Grid of exercise cards: Image/illustration, name, muscle group tags\n- Search bar above grid\n- Add to workout button on each card\n\n**Workout Log Interface**:\n- Exercise name header with muscle group icon\n- Set tracker: Row per set showing Set #, Weight (kg input), Reps (input), Completion checkbox\n- Add set button below\n- Previous workout comparison: \"Last time: 3x12 @ 25kg\" (text-sm, italic)\n- Progress chart: Line graph showing weight progression over time\n\n### Bot Message Components\n\n**Contextual Greeting Panel**:\n- Changes per page: \"Como posso ajudar com seus treinos?\" (Treinos page)\n- Icon changes per context (workout icon, food icon, money icon, etc.)\n- 2-3 suggested questions as chips below greeting\n\n**Message Bubbles**:\n- User messages: Right-aligned, max-w-80%, rounded-2xl, subtle background\n- Bot messages: Left-aligned, max-w-80%, rounded-2xl, slightly different background\n- Avatar: 32px circle (user photo vs bot icon)\n- Timestamp: text-xs below each bubble\n\n**Quick Action Chips**:\n- Horizontal scroll row at top of bot panel\n- Contextual actions: \"Adicionar Refeição\", \"Registrar Treino\", \"Novo Lembrete\"\n- Pill-shaped chips with icons\n- Tap to trigger pre-filled forms or shortcuts\n\n---\n\n## Responsive Breakpoints\n\n**Mobile** (< 768px):\n- Sidebar hidden, bottom tab navigation (5 icons)\n- Bot panel: Full-screen overlay\n- Calculator: Stacked single column\n- Calendar: Compact week view by default\n- Metric cards: Single column\n- Study materials: Single column grid\n\n**Tablet** (768px - 1024px):\n- Sidebar: Icon-only (64px wide)\n- Bot panel: 320px width\n- Calculator: Stacked or 2-column based on space\n- 2-column grids for most content\n\n**Desktop** (> 1024px):\n- Full sidebar with labels\n- Bot panel: 360px width\n- 3-column grids where applicable\n- Side-by-side calculator layouts\n- Full calendar month view\n\n---\n\n## Microinteractions\n\n**Essential Only**:\n- Bot button: Gentle pulse (scale 1.0 to 1.05, 2s infinite)\n- Card hover: Subtle shadow increase + scale(1.02)\n- Button hover: Slight brightness increase\n- Input focus: Ring appearance\n- Panel slide: Smooth 300ms ease-out transition\n- Success feedback: Green checkmark animation (500ms)\n\n---\n\n## Accessibility\n\n- Minimum 44px touch targets for all interactive elements\n- Form labels explicitly associated via htmlFor\n- Icon-only buttons: aria-label attributes\n- Keyboard navigation: Visible focus rings (ring-2, ring-offset-2)\n- Screen reader: Semantic HTML5 elements (nav, main, section, article)\n- WCAG AA contrast ratios throughout\n- Skip to main content link\n\n---\n\n## Images\n\n**Dashboard Module Icons**: 24px Heroicons for each section (outline style)  \n**Study Material Thumbnails**: 16:9 placeholder images for courses/videos (120px height)  \n**User Avatar**: 40px circle in sidebar, 32px in bot messages  \n**Exercise Illustrations**: Optional 200x150 thumbnails in exercise library  \n**Empty States**: Simple SVG illustrations for empty lists (max 200px width)  \n\nNo large hero images - this is a data-focused productivity application prioritizing information density and functionality over marketing aesthetics.","size_bytes":9544},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"attached_assets/app-sidebar_1761521628444.tsx":{"content":"import { Home, DollarSign, Dumbbell, UtensilsCrossed, Calendar, BookOpen } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\nconst items = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n    testId: \"nav-dashboard\"\n  },\n  {\n    title: \"Finanças\",\n    url: \"/financas\",\n    icon: DollarSign,\n    testId: \"nav-financas\"\n  },\n  {\n    title: \"Treinos\",\n    url: \"/treinos\",\n    icon: Dumbbell,\n    testId: \"nav-treinos\"\n  },\n  {\n    title: \"Dieta\",\n    url: \"/dieta\",\n    icon: UtensilsCrossed,\n    testId: \"nav-dieta\"\n  },\n  {\n    title: \"Agenda\",\n    url: \"/agenda\",\n    icon: Calendar,\n    testId: \"nav-agenda\"\n  },\n  {\n    title: \"Estudos\",\n    url: \"/estudos\",\n    icon: BookOpen,\n    testId: \"nav-estudos\"\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Minha Vida</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild \n                    isActive={location === item.url}\n                    data-testid={item.testId}\n                  >\n                    <Link href={item.url}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":1841},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"attached_assets/vite_1761507822900_1761510774298_1761521527025.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"attached_assets/openai_1761507822899_1761510698977_1761521547997.ts":{"content":"// Referência: javascript_openai blueprint\nimport OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = process.env.OPENAI_API_KEY \n  ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY })\n  : null;\n\nconst contextPrompts: Record<string, string> = {\n  Dashboard: \"Você é um assistente pessoal ajudando o usuário a gerenciar sua vida. Forneça insights sobre suas atividades gerais e sugira formas de otimizar seu dia.\",\n  Treinos: \"Você é um personal trainer virtual. Ajude o usuário com seus treinos, sugira exercícios, dê dicas sobre progressão de cargas e técnicas corretas.\",\n  Dieta: \"Você é um nutricionista virtual. Ajude com cálculos nutricionais, sugira alimentos saudáveis e dê dicas sobre alimentação balanceada. Sempre enfatize consultar um profissional para orientações personalizadas.\",\n  Finanças: \"Você é um consultor financeiro virtual. Ajude o usuário a organizar suas finanças, sugira categorias de gastos e dê dicas sobre economia e investimentos básicos.\",\n  Agenda: \"Você é um assistente de produtividade. Ajude o usuário a organizar tarefas, priorizar atividades e manter um equilíbrio saudável entre trabalho e vida pessoal.\",\n  Estudos: \"Você é um mentor de programação. Ajude o usuário a escolher materiais de estudo adequados, dê dicas de aprendizagem e sugira projetos práticos para consolidar conhecimento.\",\n};\n\nexport async function getChatResponse(\n  userMessage: string,\n  context: string,\n  chatHistory: Array<{ role: string; content: string }>\n): Promise<string> {\n  if (!openai) {\n    return \"⚠️ Assistente AI não configurado. Para usar este recurso, o administrador precisa adicionar a chave OPENAI_API_KEY nas variáveis de ambiente. O assistente estará pronto para ajudar você em todas as páginas assim que configurado!\";\n  }\n\n  try {\n    const systemPrompt = contextPrompts[context] || contextPrompts.Dashboard;\n    \n    const messages: Array<{ role: \"system\" | \"user\" | \"assistant\"; content: string }> = [\n      { role: \"system\", content: systemPrompt },\n      ...chatHistory.slice(-10).map(msg => ({\n        role: msg.role as \"user\" | \"assistant\",\n        content: msg.content,\n      })),\n      { role: \"user\", content: userMessage },\n    ];\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages,\n      max_completion_tokens: 1024,\n    });\n\n    return response.choices[0].message.content || \"Desculpe, não consegui processar sua mensagem.\";\n  } catch (error: any) {\n    console.error(\"OpenAI API Error:\", error.message);\n    return \"Desculpe, houve um erro ao processar sua mensagem. Tente novamente.\";\n  }\n}\n","size_bytes":2756},"attached_assets/use-mobile_1761521622618.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"attached_assets/vite_1761510881691_1761521527026.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"attached_assets/routes_1761521644308.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertFinanceSchema,\n  insertWorkoutSchema,\n  insertMealSchema,\n  insertTaskSchema,\n  insertStudySchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  app.get(\"/api/finances\", async (_req, res) => {\n    const finances = await storage.getFinances();\n    res.json(finances);\n  });\n\n  app.get(\"/api/finances/:id\", async (req, res) => {\n    const finance = await storage.getFinance(req.params.id);\n    if (!finance) {\n      return res.status(404).json({ error: \"Transação não encontrada\" });\n    }\n    res.json(finance);\n  });\n\n  app.post(\"/api/finances\", async (req, res) => {\n    try {\n      const validated = insertFinanceSchema.parse(req.body);\n      const finance = await storage.createFinance(validated);\n      res.status(201).json(finance);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.put(\"/api/finances/:id\", async (req, res) => {\n    try {\n      const validated = insertFinanceSchema.parse(req.body);\n      const finance = await storage.updateFinance(req.params.id, validated);\n      if (!finance) {\n        return res.status(404).json({ error: \"Transação não encontrada\" });\n      }\n      res.json(finance);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/finances/:id\", async (req, res) => {\n    const deleted = await storage.deleteFinance(req.params.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Transação não encontrada\" });\n    }\n    res.status(204).send();\n  });\n\n  app.get(\"/api/workouts\", async (_req, res) => {\n    const workouts = await storage.getWorkouts();\n    res.json(workouts);\n  });\n\n  app.get(\"/api/workouts/:id\", async (req, res) => {\n    const workout = await storage.getWorkout(req.params.id);\n    if (!workout) {\n      return res.status(404).json({ error: \"Treino não encontrado\" });\n    }\n    res.json(workout);\n  });\n\n  app.post(\"/api/workouts\", async (req, res) => {\n    try {\n      const validated = insertWorkoutSchema.parse(req.body);\n      const workout = await storage.createWorkout(validated);\n      res.status(201).json(workout);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.put(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const validated = insertWorkoutSchema.parse(req.body);\n      const workout = await storage.updateWorkout(req.params.id, validated);\n      if (!workout) {\n        return res.status(404).json({ error: \"Treino não encontrado\" });\n      }\n      res.json(workout);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/workouts/:id\", async (req, res) => {\n    const deleted = await storage.deleteWorkout(req.params.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Treino não encontrado\" });\n    }\n    res.status(204).send();\n  });\n\n  app.get(\"/api/meals\", async (_req, res) => {\n    const meals = await storage.getMeals();\n    res.json(meals);\n  });\n\n  app.get(\"/api/meals/:id\", async (req, res) => {\n    const meal = await storage.getMeal(req.params.id);\n    if (!meal) {\n      return res.status(404).json({ error: \"Refeição não encontrada\" });\n    }\n    res.json(meal);\n  });\n\n  app.post(\"/api/meals\", async (req, res) => {\n    try {\n      const validated = insertMealSchema.parse(req.body);\n      const meal = await storage.createMeal(validated);\n      res.status(201).json(meal);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.put(\"/api/meals/:id\", async (req, res) => {\n    try {\n      const validated = insertMealSchema.parse(req.body);\n      const meal = await storage.updateMeal(req.params.id, validated);\n      if (!meal) {\n        return res.status(404).json({ error: \"Refeição não encontrada\" });\n      }\n      res.json(meal);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/meals/:id\", async (req, res) => {\n    const deleted = await storage.deleteMeal(req.params.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Refeição não encontrada\" });\n    }\n    res.status(204).send();\n  });\n\n  app.get(\"/api/tasks\", async (_req, res) => {\n    const tasks = await storage.getTasks();\n    res.json(tasks);\n  });\n\n  app.get(\"/api/tasks/:id\", async (req, res) => {\n    const task = await storage.getTask(req.params.id);\n    if (!task) {\n      return res.status(404).json({ error: \"Tarefa não encontrada\" });\n    }\n    res.json(task);\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validated = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validated);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const validated = insertTaskSchema.parse(req.body);\n      const task = await storage.updateTask(req.params.id, validated);\n      if (!task) {\n        return res.status(404).json({ error: \"Tarefa não encontrada\" });\n      }\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    const deleted = await storage.deleteTask(req.params.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Tarefa não encontrada\" });\n    }\n    res.status(204).send();\n  });\n\n  app.get(\"/api/studies\", async (_req, res) => {\n    const studies = await storage.getStudies();\n    res.json(studies);\n  });\n\n  app.get(\"/api/studies/:id\", async (req, res) => {\n    const study = await storage.getStudy(req.params.id);\n    if (!study) {\n      return res.status(404).json({ error: \"Estudo não encontrado\" });\n    }\n    res.json(study);\n  });\n\n  app.post(\"/api/studies\", async (req, res) => {\n    try {\n      const validated = insertStudySchema.parse(req.body);\n      const study = await storage.createStudy(validated);\n      res.status(201).json(study);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.put(\"/api/studies/:id\", async (req, res) => {\n    try {\n      const validated = insertStudySchema.parse(req.body);\n      const study = await storage.updateStudy(req.params.id, validated);\n      if (!study) {\n        return res.status(404).json({ error: \"Estudo não encontrado\" });\n      }\n      res.json(study);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/studies/:id\", async (req, res) => {\n    const deleted = await storage.deleteStudy(req.params.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Estudo não encontrado\" });\n    }\n    res.status(204).send();\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":7085},"attached_assets/theme-toggle_1761521628446.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = savedTheme || \"light\";\n    setTheme(initialTheme);\n    \n    if (initialTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    \n    if (newTheme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  };\n\n  return (\n    <Button \n      variant=\"ghost\" \n      size=\"icon\" \n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n    </Button>\n  );\n}\n","size_bytes":1171},"attached_assets/use-user_1761510905710_1761521527024.ts":{"content":"// Temporary hook for mocking user authentication\n// TODO: Replace with real Replit Auth when implementing authentication\n\nexport function useUser() {\n  // Using a hardcoded temporary user ID for development\n  // This will be replaced with real authentication later\n  const userId = \"temp-user-001\";\n  \n  return {\n    userId,\n    isAuthenticated: true,\n  };\n}\n","size_bytes":360},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"attached_assets/utils_1761510901289_1761521527024.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"attached_assets/schema_1761510886589_1761521527029.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// ==============================================================================\n// Users (Replit Auth compatibility)\n// ==============================================================================\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = {\n  id: string;\n  email: string;\n  firstName?: string | null;\n  lastName?: string | null;\n  profileImageUrl?: string | null;\n};\n\n// ==============================================================================\n// Workouts & Exercises\n// ==============================================================================\n\nexport const workouts = pgTable(\"workouts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // \"Push/Pull/Legs\", \"Full Body\", \"Upper/Lower\", etc\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertWorkoutSchema = createInsertSchema(workouts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Workout = typeof workouts.$inferSelect;\nexport type InsertWorkout = z.infer<typeof insertWorkoutSchema>;\n\nexport const exercises = pgTable(\"exercises\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  workoutId: varchar(\"workout_id\").notNull().references(() => workouts.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  muscleGroup: text(\"muscle_group\").notNull(), // Peito, Costas, Pernas, Ombros, Braços, Core\n  sets: integer(\"sets\").notNull(),\n  reps: integer(\"reps\").notNull(),\n  order: integer(\"order\").notNull().default(0),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertExerciseSchema = createInsertSchema(exercises).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Exercise = typeof exercises.$inferSelect;\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\n\nexport const workoutLogs = pgTable(\"workout_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  exerciseId: varchar(\"exercise_id\").notNull().references(() => exercises.id, { onDelete: \"cascade\" }),\n  date: date(\"date\").notNull(),\n  sets: integer(\"sets\").notNull(),\n  reps: integer(\"reps\").notNull(),\n  weight: decimal(\"weight\", { precision: 6, scale: 2 }), // kg\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertWorkoutLogSchema = createInsertSchema(workoutLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type WorkoutLog = typeof workoutLogs.$inferSelect;\nexport type InsertWorkoutLog = z.infer<typeof insertWorkoutLogSchema>;\n\n// ==============================================================================\n// Diet & Nutrition\n// ==============================================================================\n\nexport const foodItems = pgTable(\"food_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }), // null = global food\n  name: text(\"name\").notNull(),\n  calories: integer(\"calories\").notNull(),\n  protein: decimal(\"protein\", { precision: 6, scale: 2 }).notNull(), // g\n  carbs: decimal(\"carbs\", { precision: 6, scale: 2 }).notNull(), // g\n  fats: decimal(\"fats\", { precision: 6, scale: 2 }).notNull(), // g\n  servingSize: text(\"serving_size\").notNull(), // \"100g\", \"1 unidade\", etc\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertFoodItemSchema = createInsertSchema(foodItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type FoodItem = typeof foodItems.$inferSelect;\nexport type InsertFoodItem = z.infer<typeof insertFoodItemSchema>;\n\nexport const meals = pgTable(\"meals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  foodItemId: varchar(\"food_item_id\").notNull().references(() => foodItems.id, { onDelete: \"cascade\" }),\n  date: date(\"date\").notNull(),\n  mealType: text(\"meal_type\").notNull(), // Café da manhã, Almoço, Jantar, Lanche\n  quantity: decimal(\"quantity\", { precision: 6, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertMealSchema = createInsertSchema(meals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Meal = typeof meals.$inferSelect;\nexport type InsertMeal = z.infer<typeof insertMealSchema>;\n\nexport const userNutritionProfile = pgTable(\"user_nutrition_profile\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }),\n  age: integer(\"age\"),\n  sex: text(\"sex\"), // \"M\" ou \"F\"\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }), // kg\n  height: integer(\"height\"), // cm\n  activityLevel: text(\"activity_level\"), // Sedentário, Leve, Moderado, Intenso, Muito Intenso\n  goal: text(\"goal\"), // Perda de peso, Manutenção, Ganho de massa\n  tdee: integer(\"tdee\"), // calculated TDEE\n  targetCalories: integer(\"target_calories\"),\n  targetProtein: integer(\"target_protein\"), // g\n  targetCarbs: integer(\"target_carbs\"), // g\n  targetFats: integer(\"target_fats\"), // g\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertNutritionProfileSchema = createInsertSchema(userNutritionProfile).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type NutritionProfile = typeof userNutritionProfile.$inferSelect;\nexport type InsertNutritionProfile = z.infer<typeof insertNutritionProfileSchema>;\n\n// ==============================================================================\n// Finances\n// ==============================================================================\n\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  type: text(\"type\").notNull(), // \"Receita\" ou \"Despesa\"\n  category: text(\"category\").notNull(), // Alimentação, Transporte, Saúde, Lazer, etc\n  description: text(\"description\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\n// ==============================================================================\n// Agenda (Tasks & Notes)\n// ==============================================================================\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  date: date(\"date\").notNull(),\n  time: text(\"time\"),\n  completed: boolean(\"completed\").default(false).notNull(),\n  priority: text(\"priority\").default(\"medium\"), // low, medium, high\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport const notes = pgTable(\"notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  date: date(\"date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Note = typeof notes.$inferSelect;\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\n\n// ==============================================================================\n// Study Materials\n// ==============================================================================\n\nexport const studyMaterials = pgTable(\"study_materials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }), // null = global material\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  url: text(\"url\").notNull(),\n  subject: text(\"subject\").notNull(), // Python, JavaScript, Web Development, Programação Geral, etc\n  level: text(\"level\").notNull(), // Iniciante, Intermediário, Avançado\n  type: text(\"type\").notNull(), // Vídeo, Curso, Artigo, Documentação\n  isFree: boolean(\"is_free\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertStudyMaterialSchema = createInsertSchema(studyMaterials).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type StudyMaterial = typeof studyMaterials.$inferSelect;\nexport type InsertStudyMaterial = z.infer<typeof insertStudyMaterialSchema>;\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  materialId: varchar(\"material_id\").notNull().references(() => studyMaterials.id, { onDelete: \"cascade\" }),\n  status: text(\"status\").default(\"não iniciado\").notNull(), // não iniciado, em progresso, concluído\n  progress: integer(\"progress\").default(0), // 0-100%\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\n\n// ==============================================================================\n// Chat Messages (Bot sem IA - respostas pré-programadas)\n// ==============================================================================\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  role: text(\"role\").notNull(), // \"user\" ou \"assistant\"\n  content: text(\"content\").notNull(),\n  context: text(\"context\").notNull(), // Dashboard, Treinos, Dieta, Finanças, Agenda, Estudos\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\n\n// ==============================================================================\n// Sessions table (required for Replit Auth)\n// ==============================================================================\n\nexport const sessions = pgTable(\"sessions\", {\n  sid: varchar(\"sid\").primaryKey(),\n  sess: text(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n","size_bytes":12645},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"attached_assets/diet_1761510896236_1761521565028.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Apple, Calculator, TrendingUp, Target } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useUser } from \"@/hooks/use-user\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { NutritionProfile, Meal } from \"@shared/schema\";\n\nexport default function Diet() {\n  const { userId } = useUser();\n  const { toast } = useToast();\n  const today = new Date().toISOString().split('T')[0];\n\n  // Fetch nutrition profile and meals\n  const { data: nutritionProfile } = useQuery<NutritionProfile>({\n    queryKey: [`/api/nutrition-profile/${userId}`],\n  });\n\n  const { data: meals = [] } = useQuery<Meal[]>({\n    queryKey: [`/api/meals?userId=${userId}&date=${today}`],\n  });\n  const [tdeeData, setTdeeData] = useState({\n    age: \"\",\n    sex: \"\",\n    weight: \"\",\n    height: \"\",\n    activityLevel: \"\",\n    goal: \"\",\n  });\n  const [tdeeResult, setTdeeResult] = useState<{\n    bmr: number;\n    tdee: number;\n    targetCalories: number;\n    protein: number;\n    carbs: number;\n    fats: number;\n  } | null>(null);\n\n  // Mutation to save nutrition profile\n  const saveProfileMutation = useMutation({\n    mutationFn: async (profile: any) => {\n      return await apiRequest(\"/api/nutrition-profile\", {\n        method: \"POST\",\n        body: JSON.stringify(profile),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/nutrition-profile/${userId}`] });\n      toast({\n        title: \"Perfil salvo\",\n        description: \"Seu perfil nutricional foi atualizado com sucesso!\",\n      });\n    },\n  });\n\n  const calculateTDEE = () => {\n    const { age, sex, weight, height, activityLevel, goal } = tdeeData;\n    \n    if (!age || !sex || !weight || !height || !activityLevel || !goal) {\n      return;\n    }\n\n    // Mifflin-St Jeor Equation\n    let bmr = 0;\n    const w = parseFloat(weight);\n    const h = parseFloat(height);\n    const a = parseInt(age);\n\n    if (sex === \"M\") {\n      bmr = 10 * w + 6.25 * h - 5 * a + 5;\n    } else {\n      bmr = 10 * w + 6.25 * h - 5 * a - 161;\n    }\n\n    // Activity multipliers\n    const activityMultipliers: Record<string, number> = {\n      \"Sedentário\": 1.2,\n      \"Leve\": 1.375,\n      \"Moderado\": 1.55,\n      \"Intenso\": 1.725,\n      \"Muito Intenso\": 1.9,\n    };\n\n    const tdee = Math.round(bmr * activityMultipliers[activityLevel]);\n\n    // Goal adjustments\n    let targetCalories = tdee;\n    if (goal === \"Perda de peso\") {\n      targetCalories = tdee - 500;\n    } else if (goal === \"Ganho de massa\") {\n      targetCalories = tdee + 300;\n    }\n\n    // Macro calculation (40% protein, 40% carbs, 20% fats for balanced)\n    const protein = Math.round((targetCalories * 0.30) / 4);\n    const carbs = Math.round((targetCalories * 0.40) / 4);\n    const fats = Math.round((targetCalories * 0.30) / 9);\n\n    const result = {\n      bmr: Math.round(bmr),\n      tdee,\n      targetCalories,\n      protein,\n      carbs,\n      fats,\n    };\n\n    setTdeeResult(result);\n\n    // Save to backend\n    saveProfileMutation.mutate({\n      userId,\n      age: a,\n      sex,\n      weight: w,\n      height: h,\n      activityLevel,\n      goal,\n      targetCalories,\n      targetProtein: protein,\n      targetCarbs: carbs,\n      targetFats: fats,\n    });\n  };\n\n  // Calculate calories consumed today\n  const caloriesToday = meals.reduce((sum, meal) => {\n    const items = Array.isArray(meal.items) ? meal.items : [];\n    return sum + items.reduce((itemSum: number, item: any) => {\n      return itemSum + (item.calories || 0) * (item.servings || 1);\n    }, 0);\n  }, 0);\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">Dieta & Nutrição</h1>\n            <p className=\"text-muted-foreground\">\n              Gerencie sua alimentação e acompanhe seus macros\n            </p>\n          </div>\n          <Button data-testid=\"button-add-meal\">\n            <Plus className=\"h-4 w-4\" />\n            Registrar Refeição\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-lg grid-cols-3\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n              Visão Geral\n            </TabsTrigger>\n            <TabsTrigger value=\"calculator\" data-testid=\"tab-calculator\">\n              Calculadora TDEE\n            </TabsTrigger>\n            <TabsTrigger value=\"meals\" data-testid=\"tab-meals\">\n              Refeições\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4 mt-6\">\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Meta Diária</CardTitle>\n                  <Target className=\"h-4 w-4 text-chart-1\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">\n                    {nutritionProfile?.targetCalories || 0} kcal\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {nutritionProfile ? \"Meta configurada\" : \"Configure sua meta na calculadora\"}\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Consumido Hoje</CardTitle>\n                  <Apple className=\"h-4 w-4 text-chart-2\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{Math.round(caloriesToday)} kcal</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {caloriesToday > 0 ? \"Registrado hoje\" : \"Nenhuma refeição registrada\"}\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Restante</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-chart-3\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">0 kcal</div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    0% da meta atingida\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Macronutrientes Hoje</CardTitle>\n                <CardDescription>\n                  Acompanhe sua distribuição de proteínas, carboidratos e gorduras\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Proteínas</span>\n                    <span className=\"font-medium\">0g / 0g</span>\n                  </div>\n                  <Progress value={0} className=\"h-2\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Carboidratos</span>\n                    <span className=\"font-medium\">0g / 0g</span>\n                  </div>\n                  <Progress value={0} className=\"h-2\" />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Gorduras</span>\n                    <span className=\"font-medium\">0g / 0g</span>\n                  </div>\n                  <Progress value={0} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"calculator\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calculator className=\"h-5 w-5 text-primary\" />\n                  Calculadora TDEE (Total Daily Energy Expenditure)\n                </CardTitle>\n                <CardDescription>\n                  Calcule suas necessidades calóricas e macros ideais\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"age\">Idade</Label>\n                    <Input\n                      id=\"age\"\n                      type=\"number\"\n                      placeholder=\"Ex: 25\"\n                      value={tdeeData.age}\n                      onChange={(e) => setTdeeData({ ...tdeeData, age: e.target.value })}\n                      data-testid=\"input-age\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sex\">Sexo</Label>\n                    <Select\n                      value={tdeeData.sex}\n                      onValueChange={(value) => setTdeeData({ ...tdeeData, sex: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-sex\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"M\">Masculino</SelectItem>\n                        <SelectItem value=\"F\">Feminino</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"weight\">Peso (kg)</Label>\n                    <Input\n                      id=\"weight\"\n                      type=\"number\"\n                      step=\"0.1\"\n                      placeholder=\"Ex: 70.5\"\n                      value={tdeeData.weight}\n                      onChange={(e) => setTdeeData({ ...tdeeData, weight: e.target.value })}\n                      data-testid=\"input-weight\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"height\">Altura (cm)</Label>\n                    <Input\n                      id=\"height\"\n                      type=\"number\"\n                      placeholder=\"Ex: 175\"\n                      value={tdeeData.height}\n                      onChange={(e) => setTdeeData({ ...tdeeData, height: e.target.value })}\n                      data-testid=\"input-height\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"activity\">Nível de Atividade</Label>\n                    <Select\n                      value={tdeeData.activityLevel}\n                      onValueChange={(value) => setTdeeData({ ...tdeeData, activityLevel: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-activity\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Sedentário\">Sedentário (pouco ou nenhum exercício)</SelectItem>\n                        <SelectItem value=\"Leve\">Leve (1-3 dias/semana)</SelectItem>\n                        <SelectItem value=\"Moderado\">Moderado (3-5 dias/semana)</SelectItem>\n                        <SelectItem value=\"Intenso\">Intenso (6-7 dias/semana)</SelectItem>\n                        <SelectItem value=\"Muito Intenso\">Muito Intenso (atleta)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"goal\">Objetivo</Label>\n                    <Select\n                      value={tdeeData.goal}\n                      onValueChange={(value) => setTdeeData({ ...tdeeData, goal: value })}\n                    >\n                      <SelectTrigger data-testid=\"select-goal\">\n                        <SelectValue placeholder=\"Selecione\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Perda de peso\">Perda de peso</SelectItem>\n                        <SelectItem value=\"Manutenção\">Manutenção</SelectItem>\n                        <SelectItem value=\"Ganho de massa\">Ganho de massa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Button onClick={calculateTDEE} className=\"w-full\" data-testid=\"button-calculate-tdee\">\n                  Calcular TDEE e Macros\n                </Button>\n\n                {tdeeResult && (\n                  <div className=\"space-y-4 pt-4 border-t\">\n                    <h3 className=\"font-semibold text-lg\">Seus Resultados:</h3>\n                    \n                    <div className=\"grid gap-3 md:grid-cols-2\">\n                      <div className=\"p-4 rounded-lg bg-muted\">\n                        <p className=\"text-sm text-muted-foreground\">Taxa Metabólica Basal (BMR)</p>\n                        <p className=\"text-2xl font-bold\" data-testid=\"text-bmr\">{tdeeResult.bmr} kcal</p>\n                      </div>\n                      \n                      <div className=\"p-4 rounded-lg bg-muted\">\n                        <p className=\"text-sm text-muted-foreground\">TDEE (Gasto Diário Total)</p>\n                        <p className=\"text-2xl font-bold\" data-testid=\"text-tdee\">{tdeeResult.tdee} kcal</p>\n                      </div>\n                    </div>\n\n                    <div className=\"p-4 rounded-lg bg-primary text-primary-foreground\">\n                      <p className=\"text-sm opacity-90\">Meta Calórica Diária</p>\n                      <p className=\"text-3xl font-bold\" data-testid=\"text-target-calories\">\n                        {tdeeResult.targetCalories} kcal\n                      </p>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Distribuição de Macronutrientes:</h4>\n                      <div className=\"grid gap-3 md:grid-cols-3\">\n                        <div className=\"p-4 rounded-lg border\">\n                          <p className=\"text-sm text-muted-foreground\">Proteínas</p>\n                          <p className=\"text-xl font-bold text-chart-1\" data-testid=\"text-protein\">\n                            {tdeeResult.protein}g\n                          </p>\n                          <Badge variant=\"secondary\" className=\"mt-1\">30%</Badge>\n                        </div>\n                        <div className=\"p-4 rounded-lg border\">\n                          <p className=\"text-sm text-muted-foreground\">Carboidratos</p>\n                          <p className=\"text-xl font-bold text-chart-2\" data-testid=\"text-carbs\">\n                            {tdeeResult.carbs}g\n                          </p>\n                          <Badge variant=\"secondary\" className=\"mt-1\">40%</Badge>\n                        </div>\n                        <div className=\"p-4 rounded-lg border\">\n                          <p className=\"text-sm text-muted-foreground\">Gorduras</p>\n                          <p className=\"text-xl font-bold text-chart-3\" data-testid=\"text-fats\">\n                            {tdeeResult.fats}g\n                          </p>\n                          <Badge variant=\"secondary\" className=\"mt-1\">30%</Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-save-profile\">\n                      Salvar no Perfil Nutricional\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"meals\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Registro de Refeições</CardTitle>\n                <CardDescription>\n                  Acompanhe suas refeições diárias\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-40 border-2 border-dashed rounded-lg\">\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Nenhuma refeição registrada hoje\n                    </p>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-first-meal\">\n                      <Plus className=\"h-4 w-4\" />\n                      Registrar Primeira Refeição\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18103},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"attached_assets/postcss.config_1761507495109_1761510774299_1761521547988.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"attached_assets/tailwind.config_1761510492029_1761521527020.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      {/* <Route path=\"/\" component={Home}/> */}\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":733},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"attached_assets/db_1761510881689_1761521565024.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"attached_assets/use-mobile_1761510907578_1761521527023.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"attached_assets/index_1761507822899_1761510695462_1761521565032.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"attached_assets/main_1761510831128_1761521547996.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"attached_assets/use-toast_1761510905709_1761521527023.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"attached_assets/seed_1761510881690_1761521527030.ts":{"content":"import { db } from \"./db\";\nimport { studyMaterials } from \"@shared/schema\";\n\nconst pythonMaterials = [\n  {\n    userId: null,\n    title: \"Python para Iniciantes - Documentação Oficial\",\n    description: \"Tutorial oficial da linguagem Python para quem está começando. Cobre desde variáveis básicas até funções e classes.\",\n    url: \"https://docs.python.org/pt-br/3/tutorial/index.html\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Documentação\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Python Brasil - Comunidade e Recursos\",\n    description: \"Comunidade brasileira de Python com fóruns, eventos, cursos gratuitos e materiais em português.\",\n    url: \"https://python.org.br/\",\n    subject: \"Python\",\n    level: \"Todos\",\n    type: \"Comunidade\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Real Python - Tutoriais Práticos\",\n    description: \"Tutoriais detalhados e práticos sobre Python, desde o básico até tópicos avançados como web development e data science.\",\n    url: \"https://realpython.com/\",\n    subject: \"Python\",\n    level: \"Intermediário\",\n    type: \"Artigos\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Python Crash Course - Livro Gratuito\",\n    description: \"Livro completo de Python com projetos práticos: jogos, visualização de dados e aplicações web.\",\n    url: \"https://nostarch.com/pythoncrashcourse2e\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: false,\n  },\n  {\n    userId: null,\n    title: \"Automate the Boring Stuff with Python\",\n    description: \"Aprenda Python automatizando tarefas do dia-a-dia: organizar arquivos, web scraping, Excel, email e mais.\",\n    url: \"https://automatetheboringstuff.com/\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Python for Everybody (Coursera)\",\n    description: \"Curso completo de Python da Universidade de Michigan, cobrindo estruturas de dados, web services e banco de dados.\",\n    url: \"https://www.coursera.org/specializations/python\",\n    subject: \"Python\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Django Girls Tutorial\",\n    description: \"Tutorial prático e amigável para criar sua primeira aplicação web com Django framework.\",\n    url: \"https://tutorial.djangogirls.org/pt/\",\n    subject: \"Python\",\n    level: \"Intermediário\",\n    type: \"Tutorial\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Flask Mega-Tutorial\",\n    description: \"Tutorial completo de Flask framework para desenvolvimento web com Python, do básico ao deploy.\",\n    url: \"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\",\n    subject: \"Python\",\n    level: \"Intermediário\",\n    type: \"Tutorial\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Python Data Science Handbook\",\n    description: \"Guia completo para ciência de dados com Python: NumPy, Pandas, Matplotlib, Scikit-Learn.\",\n    url: \"https://jakevdp.github.io/PythonDataScienceHandbook/\",\n    subject: \"Python\",\n    level: \"Avançado\",\n    type: \"Documentação\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"MDN Web Docs - JavaScript\",\n    description: \"Documentação completa sobre JavaScript, APIs web e desenvolvimento frontend.\",\n    url: \"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript\",\n    subject: \"JavaScript\",\n    level: \"Todos\",\n    type: \"Documentação\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"JavaScript.info - Tutorial Moderno\",\n    description: \"Tutorial moderno de JavaScript do básico ao avançado, com exemplos interativos e exercícios.\",\n    url: \"https://javascript.info/\",\n    subject: \"JavaScript\",\n    level: \"Todos\",\n    type: \"Tutorial\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"FreeCodeCamp - Certificação Completa\",\n    description: \"Aprenda programação web completa com projetos práticos: HTML, CSS, JavaScript, React, Node.js.\",\n    url: \"https://www.freecodecamp.org/\",\n    subject: \"Web Development\",\n    level: \"Todos\",\n    type: \"Curso\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"The Odin Project\",\n    description: \"Currículo completo de desenvolvimento web full-stack gratuito, com projetos reais.\",\n    url: \"https://www.theodinproject.com/\",\n    subject: \"Web Development\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"CS50 - Introduction to Computer Science\",\n    description: \"Curso introdutório de ciência da computação de Harvard, cobrindo algoritmos, estruturas de dados e mais.\",\n    url: \"https://cs50.harvard.edu/x/\",\n    subject: \"Programação Geral\",\n    level: \"Iniciante\",\n    type: \"Curso\",\n    isFree: true,\n  },\n  {\n    userId: null,\n    title: \"Git and GitHub Tutorial\",\n    description: \"Aprenda controle de versão com Git e colaboração com GitHub, essenciais para qualquer desenvolvedor.\",\n    url: \"https://docs.github.com/pt/get-started\",\n    subject: \"Programação Geral\",\n    level: \"Iniciante\",\n    type: \"Documentação\",\n    isFree: true,\n  },\n];\n\nasync function seed() {\n  console.log(\"🌱 Seeding database with study materials...\");\n  \n  try {\n    for (const material of pythonMaterials) {\n      await db.insert(studyMaterials).values(material);\n      console.log(`✓ Added: ${material.title}`);\n    }\n    \n    console.log(`\\n✅ Successfully seeded ${pythonMaterials.length} study materials!`);\n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\nseed();\n","size_bytes":5650},"attached_assets/App_1761510790697_1761521574328.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { BotAssistant } from \"@/components/bot-assistant\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport Workouts from \"@/pages/workouts\";\nimport Diet from \"@/pages/diet\";\nimport Finance from \"@/pages/finance\";\nimport Agenda from \"@/pages/agenda\";\nimport Study from \"@/pages/study\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/workouts\" component={Workouts} />\n      <Route path=\"/diet\" component={Diet} />\n      <Route path=\"/finance\" component={Finance} />\n      <Route path=\"/agenda\" component={Agenda} />\n      <Route path=\"/study\" component={Study} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\">\n              <AppSidebar />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header className=\"flex items-center justify-between gap-2 p-4 border-b sticky top-0 z-10 bg-background\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </header>\n                <main className=\"flex-1 overflow-hidden\">\n                  <Router />\n                </main>\n              </div>\n            </div>\n            <BotAssistant />\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2280},"attached_assets/financas_1761521597272.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Pencil, Trash2, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertFinanceSchema, type Finance, type InsertFinance } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function Financas() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingFinance, setEditingFinance] = useState<Finance | null>(null);\n  const { toast } = useToast();\n\n  const { data: finances = [], isLoading } = useQuery<Finance[]>({\n    queryKey: [\"/api/finances\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertFinance) =>\n      apiRequest(\"/api/finances\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/finances\"] });\n      toast({ title: \"Transação adicionada com sucesso!\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertFinance }) =>\n      apiRequest(`/api/finances/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/finances\"] });\n      toast({ title: \"Transação atualizada com sucesso!\" });\n      setDialogOpen(false);\n      setEditingFinance(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/finances/${id}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/finances\"] });\n      toast({ title: \"Transação removida com sucesso!\" });\n    },\n  });\n\n  const form = useForm<InsertFinance>({\n    resolver: zodResolver(insertFinanceSchema),\n    defaultValues: {\n      descricao: \"\",\n      valor: \"0\",\n      categoria: \"\",\n      tipo: \"despesa\",\n      data: format(new Date(), \"yyyy-MM-dd\"),\n    },\n  });\n\n  const onSubmit = (data: InsertFinance) => {\n    if (editingFinance) {\n      updateMutation.mutate({ id: editingFinance.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (finance: Finance) => {\n    setEditingFinance(finance);\n    form.reset({\n      descricao: finance.descricao,\n      valor: finance.valor,\n      categoria: finance.categoria,\n      tipo: finance.tipo,\n      data: finance.data,\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Tem certeza que deseja excluir esta transação?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleDialogClose = (open: boolean) => {\n    setDialogOpen(open);\n    if (!open) {\n      setEditingFinance(null);\n      form.reset();\n    }\n  };\n\n  const totalReceitas = finances\n    .filter((f) => f.tipo === \"receita\")\n    .reduce((sum, f) => sum + parseFloat(f.valor), 0);\n\n  const totalDespesas = finances\n    .filter((f) => f.tipo === \"despesa\")\n    .reduce((sum, f) => sum + parseFloat(f.valor), 0);\n\n  const saldo = totalReceitas - totalDespesas;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-4xl font-bold\">Finanças</h1>\n        <Dialog open={dialogOpen} onOpenChange={handleDialogClose}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-finance\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nova Transação\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingFinance ? \"Editar Transação\" : \"Nova Transação\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"descricao\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Salário, Supermercado...\"\n                          data-testid=\"input-descricao\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"valor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Valor</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          data-testid=\"input-valor\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"categoria\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Categoria</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Alimentação, Transporte...\"\n                          data-testid=\"input-categoria\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"tipo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-tipo\">\n                            <SelectValue placeholder=\"Selecione o tipo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"receita\">Receita</SelectItem>\n                          <SelectItem value=\"despesa\">Despesa</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"data\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          data-testid=\"input-data\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-submit-finance\"\n                >\n                  {editingFinance ? \"Atualizar\" : \"Adicionar\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Receitas</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-receitas\">\n              R$ {totalReceitas.toFixed(2)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Despesas</CardTitle>\n            <TrendingDown className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-despesas\">\n              R$ {totalDespesas.toFixed(2)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Saldo</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div\n              className={`text-2xl font-bold font-mono ${saldo >= 0 ? \"text-green-600\" : \"text-red-600\"\n                }`}\n              data-testid=\"text-saldo\"\n            >\n              R$ {saldo.toFixed(2)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Transações</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Carregando...</p>\n          ) : finances.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">\n              Nenhuma transação cadastrada. Adicione uma nova transação para começar.\n            </p>\n          ) : (\n            <div className=\"space-y-2\">\n              {finances.map((finance) => (\n                <div\n                  key={finance.id}\n                  className=\"flex items-center justify-between p-4 rounded-md border\"\n                  data-testid={`finance-item-${finance.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">{finance.descricao}</h3>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {finance.categoria}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {format(new Date(finance.data), \"dd/MM/yyyy\")}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <span\n                      className={`text-lg font-bold font-mono ${finance.tipo === \"receita\"\n                          ? \"text-green-600\"\n                          : \"text-red-600\"\n                        }`}\n                    >\n                      {finance.tipo === \"receita\" ? \"+\" : \"-\"} R${\" \"}\n                      {parseFloat(finance.valor).toFixed(2)}\n                    </span>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(finance)}\n                        data-testid={`button-edit-${finance.id}`}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleDelete(finance.id)}\n                        data-testid={`button-delete-${finance.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12872},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"design_guidelines.md":{"content":"# Design Guidelines: Personal Management Application\n\n## Design Approach\n\n**Selected Framework**: Linear + Notion Hybrid System  \nModern productivity application design focusing on clean data presentation, efficient workflows, and contextual assistance. Emphasis on clarity, hierarchy, and rapid information access.\n\n**Core Principles**:\n- Information density without clutter\n- Instant access to all modules\n- Contextual bot assistance omnipresence\n- Data visualization clarity\n- Mobile-responsive layouts\n\n---\n\n## Typography System\n\n**Font Families**:\n- Primary: Inter (via Google Fonts CDN)\n- Monospace: JetBrains Mono (for numbers, data, code)\n\n**Type Scale**:\n- Hero/Module Headers: `text-4xl font-bold` (36px)\n- Section Titles: `text-2xl font-semibold` (24px)\n- Card Headers: `text-lg font-medium` (18px)\n- Body Text: `text-base font-normal` (16px)\n- Secondary/Meta: `text-sm font-normal` (14px)\n- Data Labels: `text-xs font-medium uppercase tracking-wide` (12px)\n\n**Emphasis Patterns**:\n- Numbers/Metrics: `font-semibold text-2xl to text-4xl` (JetBrains Mono)\n- Button Text: `font-medium text-sm`\n- Navigation: `font-medium text-sm`\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of **2, 4, 6, 8, 12, 16**  \n(p-2, m-4, gap-6, space-y-8, py-12, mt-16)\n\n**Container Strategy**:\n- Sidebar: Fixed `w-70` (280px)\n- Main Content: `max-w-7xl` with `px-6 md:px-8`\n- Module Cards: `max-w-6xl`\n- Forms: `max-w-2xl`\n- Bot Panel: Fixed `w-90` (360px) when expanded\n\n**Grid Patterns**:\n- Dashboard Overview: `grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6`\n- Data Tables: Full width with horizontal scroll\n- Calendar Views: Full width 7-column grid\n- Study Materials: `grid-cols-1 lg:grid-cols-2 gap-8`\n\n**Vertical Rhythm**:\n- Section spacing: `space-y-8`\n- Card internal padding: `p-6`\n- Form field spacing: `space-y-4`\n- List item spacing: `space-y-2`\n\n---\n\n## Navigation & Layout Structure\n\n**Primary Navigation**: Left sidebar (desktop) / Bottom tab bar (mobile)\n- Logo/App Name at top\n- User profile section with avatar\n- Module icons with labels: Dashboard, Treinos, Dieta, Finanças, Agenda, Estudos\n- Settings at bottom\n- Sidebar collapses to icon-only on tablet\n\n**Bot Assistant**: Floating button (bottom-right) + expandable panel\n- Persistent across all pages\n- Toggle button: 56px circle with chat icon\n- Expanded panel: Slides from right, 360px width, full height\n- Panel includes: contextual greeting, chat history, input field, quick actions\n- Position: `fixed bottom-8 right-8`\n\n**Header Bar** (top of main content):\n- Breadcrumb navigation (Home > Module > Subpage)\n- Search bar (global, center-aligned)\n- Notifications icon\n- Quick add button (+ icon with dropdown for common actions)\n\n---\n\n## Component Library\n\n### Dashboard & Metric Cards\n- Elevated card style with `rounded-2xl` borders\n- Large number display: `text-2xl to text-4xl font-bold` (JetBrains Mono)\n- Icon in top-right corner (24px)\n- Padding: `p-6`\n- Grid layout: 3 columns desktop, 2 tablet, 1 mobile\n\n### Form Components\n- Dialog overlays for create/edit actions\n- Label above input: `text-sm font-medium mb-2`\n- Input fields: `h-12 px-4 rounded-lg` with border\n- Focus states: ring treatment\n- Error states: border treatment + `text-sm` error message below\n- Multi-column forms: `grid-cols-2 gap-6` on desktop\n- Submit buttons: Primary CTA, full-width on mobile\n\n### Data Tables & Lists\n- Sticky header row\n- Alternating row treatment for readability\n- Action buttons at row end (icon buttons)\n- Responsive: horizontal scroll or card-based view on mobile\n\n### Calendar Components\n- Monthly view: 7-column grid, day cells `h-24 p-2`\n- Current day: Bold border treatment\n- Event indicators: Colored dots or mini-badges\n- Timeline view: Vertical with hour markers\n- Event cards: Time range, title, category badge\n\n### Study Material Cards\n- Image/icon at top (120px height)\n- Title: `text-lg font-semibold line-clamp-2`\n- Category badge: small pill shape\n- Meta info: difficulty level, duration\n- CTA button at bottom: \"Acessar Conteúdo\"\n- Hover effect: subtle elevation\n\n### Bot Chat Interface\n- User messages: `rounded-2xl` right-aligned, `max-w-80%`\n- Bot messages: `rounded-2xl` left-aligned, `max-w-80%`\n- Avatar: 32px circle (user photo vs bot icon)\n- Timestamp: `text-xs` below each message\n- Multi-line textarea input: `min-h-12 max-h-32`\n\n---\n\n## Responsive Breakpoints\n\n**Mobile** (< 768px):\n- Sidebar hidden, bottom tab navigation (5 icons)\n- Bot panel: Full-screen overlay\n- Single column layouts\n- Tables: Card-based view\n- Metrics: 2 columns maximum\n\n**Tablet** (768px - 1024px):\n- Sidebar: Icon-only (64px wide)\n- 2-column grids\n- Bot panel: 320px width\n- Reduced padding: `px-6`\n\n**Desktop** (> 1024px):\n- Full sidebar with labels\n- 3-column grids where applicable\n- Bot panel: 360px width\n- Standard padding: `px-8`\n\n---\n\n## Microinteractions (Minimal Use)\n\n**Essential Only**:\n- Button hover: subtle scale (`scale-105`) - 150ms\n- Card hover: slight shadow increase - 200ms\n- Input focus: ring appearance - instant\n- Navigation active state: indicator slide - 300ms\n- Panel slide animations: 300ms ease-out\n\n**Loading States**:\n- Skeleton screens for data tables and cards\n- Spinner for form submissions (inside button)\n- Shimmer effect for card loading\n\n---\n\n## Accessibility\n\n- All interactive elements: `min-h-12` touch target\n- Form labels: explicitly associated with inputs\n- Icon buttons: aria-label attributes\n- Keyboard navigation: visible focus states throughout\n- Screen reader: semantic HTML, ARIA landmarks\n- Contrast ratios: maintain WCAG AA minimum\n- Skip to main content link at top\n\n---\n\n## Images\n\n**Dashboard Module Cards**: 24px Heroicons for each section (outline style)  \n**Study Material Thumbnails**: 16:9 placeholder images for courses/videos (120px height)  \n**User Avatar**: 40px circle in sidebar, 32px in bot messages  \n**Empty States**: Simple SVG illustrations for empty lists (max 200px width)\n\n**No large hero images** - this is a data-focused productivity application prioritizing information density and functionality over marketing aesthetics.","size_bytes":6095},"attached_assets/design_guidelines_1761507484183_1761510687234_1761521565027.md":{"content":"# Design Guidelines: Aplicação de Gerenciamento Pessoal\n\n## Design Approach\n\n**Selected Framework**: Linear + Notion Hybrid System  \nModern productivity application design focusing on clean data presentation, efficient workflows, and contextual AI assistance. Emphasis on clarity, hierarchy, and rapid information access.\n\n**Core Principles**:\n- Information density without clutter\n- Instant access to all modules\n- Contextual bot assistance omnipresence\n- Data visualization clarity\n- Mobile-responsive layouts\n\n---\n\n## Typography System\n\n**Font Families**:\n- Primary: Inter (via Google Fonts CDN)\n- Monospace: JetBrains Mono (for numbers, data, code in estudos section)\n\n**Type Scale**:\n- Hero/Module Headers: text-4xl, font-bold (36px)\n- Section Titles: text-2xl, font-semibold (24px)\n- Card Headers: text-lg, font-medium (18px)\n- Body Text: text-base, font-normal (16px)\n- Secondary/Meta: text-sm, font-normal (14px)\n- Data Labels: text-xs, font-medium, uppercase, tracking-wide (12px)\n\n**Emphasis Patterns**:\n- Numbers/Metrics: font-semibold, text-2xl to text-4xl (JetBrains Mono)\n- Button Text: font-medium, text-sm\n- Navigation: font-medium, text-sm\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16  \n(p-2, m-4, gap-6, space-y-8, py-12, mt-16)\n\n**Container Strategy**:\n- Sidebar: Fixed width 280px (w-70)\n- Main Content: max-w-7xl with px-6 md:px-8\n- Module Cards: max-w-6xl\n- Forms: max-w-2xl\n- Bot Panel: Fixed 360px (w-90) when expanded\n\n**Grid Patterns**:\n- Dashboard Overview: grid-cols-1 md:grid-cols-2 lg:grid-cols-3, gap-6\n- Data Tables: Full width with horizontal scroll\n- Calendar Views: Full width 7-column grid\n- Study Materials: grid-cols-1 lg:grid-cols-2, gap-8\n\n**Vertical Rhythm**:\n- Section spacing: space-y-8\n- Card internal padding: p-6\n- Form field spacing: space-y-4\n- List item spacing: space-y-2\n\n---\n\n## Navigation & Layout Structure\n\n**Primary Navigation**: Left sidebar (desktop) / Bottom tab bar (mobile)\n- Logo/App Name at top\n- User profile section with avatar\n- Module icons with labels:\n  - Dashboard (overview icon)\n  - Treinos (dumbbell icon)\n  - Dieta (nutrition icon)\n  - Finanças (chart icon)\n  - Agenda (calendar icon)\n  - Estudos (book icon)\n- Settings at bottom\n- Sidebar collapses to icon-only on tablet\n\n**Bot Assistant**: Floating button (bottom-right) + expandable panel\n- Persistent across all pages\n- Toggle button: 56px circle with chat icon\n- Expanded panel: Slides from right, 360px width, full height\n- Panel includes: contextual greeting, chat history, input field, quick actions\n- Position: fixed, bottom-8, right-8\n\n**Header Bar** (top of main content):\n- Breadcrumb navigation (Home > Module > Subpage)\n- Search bar (global, center-aligned)\n- Notifications icon\n- Quick add button (+ icon with dropdown for common actions)\n\n---\n\n## Component Library\n\n### Dashboard Cards\n- Elevated card style with rounded-2xl borders\n- Header: Module name + icon, \"Ver tudo\" link\n- Content area with key metrics or recent items\n- Padding: p-6\n- Grid layout on dashboard: 3 columns desktop, 2 tablet, 1 mobile\n\n### Data Tables\n- Sticky header row\n- Alternating row treatment for readability\n- Sortable columns with arrow indicators\n- Action buttons at row end (icon buttons)\n- Pagination at bottom\n- Responsive: horizontal scroll on mobile\n\n### Forms & Inputs\n- Label above input: text-sm, font-medium, mb-2\n- Input fields: h-12, px-4, rounded-lg, border\n- Focus states: ring treatment\n- Error states: border treatment + text-sm error message below\n- Multi-column forms: grid-cols-2 gap-6 on desktop\n\n### Calendar Components\n**Monthly Calendar**:\n- 7-column grid for days\n- Day cells: h-24, p-2\n- Current day emphasis: border treatment\n- Events/workouts as colored dots or mini-badges\n- Click to expand day details\n\n**Day Detail View**:\n- Timeline format (vertical)\n- Hour markers on left\n- Event/task cards with start/end times\n- Drag-to-reschedule capability\n\n### Metric Cards (Dieta/Treinos)\n- Large number display: text-4xl, font-bold, JetBrains Mono\n- Label below: text-sm, uppercase, tracking-wide\n- Optional progress bar below metrics\n- Icon in top-right corner\n- Padding: p-6\n\n### Chart Components (Finanças)\n- Full-width container with aspect-ratio-video\n- Legend positioned top-right\n- Responsive: stacks vertically on mobile\n- Time period selector (tabs: Semana, Mês, Ano)\n\n### Study Material Cards\n- Image/icon at top (120px height)\n- Title: text-lg, font-semibold, line-clamp-2\n- Category badge: small pill shape\n- Meta info: difficulty level, duration\n- CTA button at bottom\n- Hover effect: subtle lift (transform)\n\n### Bot Chat Interface\n**Message Bubbles**:\n- User messages: rounded-2xl, ml-auto, max-w-80%\n- Bot messages: rounded-2xl, mr-auto, max-w-80%\n- Timestamp: text-xs below each message\n- Typing indicator animation for bot\n\n**Input Area**:\n- Multi-line textarea: min-h-12, max-h-32\n- Send button: icon only, positioned right\n- Attachment button for file uploads (estudos context)\n- Voice input button (optional microphone icon)\n\n### Modals & Overlays\n- Backdrop: backdrop-blur-sm treatment\n- Modal: max-w-2xl, rounded-2xl, centered\n- Header: title + close button\n- Content: p-8, max-h-90vh with overflow-scroll\n- Footer: action buttons right-aligned\n\n### Import CSV Interface (Dieta)\n- Drag-and-drop zone: dashed border, h-48\n- File preview table after upload\n- Column mapping interface (dropdown selectors)\n- Validation feedback (errors highlighted in red)\n- Confirm import button\n\n### Workout Calendar (Treinos)\n- Month view with workout indicators (colored dots)\n- Day click opens detail modal\n- Detail modal shows: exercises list, sets/reps, weights input fields\n- Weight progression chart at top\n- Quick add exercise button\n\n### Financial Dashboard (Finanças)\n- Summary cards row: Receitas, Despesas, Saldo (3 columns)\n- Category breakdown pie chart\n- Transaction list table below\n- Filter controls: date range, categories\n- Add transaction floating action button\n\n### Study Organization (Estudos)\n**Material Browser**:\n- Left sidebar: subject categories (Python, Web, etc.)\n- Right content: grid of material cards\n- Filter tags: Iniciante, Intermediário, Avançado\n- Sort options: Mais recente, Popularidade\n\n**Resource Detail View**:\n- Hero image/thumbnail\n- Title: text-3xl, font-bold\n- Meta row: category, level, type (video/article/curso)\n- Description content\n- External link button: \"Acessar Curso\"\n- Related materials section below\n\n---\n\n## Responsive Breakpoints\n\n**Mobile** (< 768px):\n- Sidebar hidden, bottom tab navigation\n- Single column layouts\n- Bot panel: full-screen overlay\n- Tables: card-based view instead of table\n- Metrics: 2 columns maximum\n\n**Tablet** (768px - 1024px):\n- Sidebar collapsed to icons only\n- 2-column grids\n- Bot panel: 320px width\n- Reduced padding: px-6\n\n**Desktop** (> 1024px):\n- Full sidebar with labels\n- 3-column grids\n- Bot panel: 360px width\n- Standard padding: px-8\n\n---\n\n## Microinteractions (Minimal Use)\n\n**Essential Only**:\n- Button hover: subtle scale (scale-105) - 150ms\n- Card hover: slight shadow increase - 200ms\n- Input focus: ring appearance - instant\n- Navigation active state: indicator slide - 300ms\n- Bot message appear: fade-in from bottom - 200ms\n\n**Loading States**:\n- Skeleton screens for data tables\n- Spinner for form submissions\n- Shimmer effect for card loading\n\n---\n\n## Accessibility Standards\n\n- All interactive elements: min-h-12 touch target\n- Form labels: explicitly associated with inputs\n- Icon buttons: aria-label attributes\n- Keyboard navigation: visible focus states throughout\n- Screen reader: semantic HTML, ARIA landmarks\n- Contrast ratios: maintain WCAG AA minimum\n- Skip to main content link at top\n\n---\n\n## Images\n\n**Dashboard Module Cards**: Small icons (24px) from Heroicons for each module section  \n**Study Materials**: Placeholder thumbnails (16:9 ratio) for course/resource previews  \n**User Profile**: Avatar image (40px circle) in sidebar  \n**Empty States**: Illustrative SVG graphics for empty data states  \n\nNo large hero image required - this is a data-focused productivity application focused on information density and functionality.","size_bytes":8152},"attached_assets/dieta_1761521597271.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Pencil, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertMealSchema, type Meal, type InsertMeal } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function Dieta() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingMeal, setEditingMeal] = useState<Meal | null>(null);\n  const { toast } = useToast();\n\n  const { data: meals = [], isLoading } = useQuery<Meal[]>({\n    queryKey: [\"/api/meals\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertMeal) =>\n      apiRequest(\"/api/meals\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({ title: \"Refeição adicionada com sucesso!\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: InsertMeal }) =>\n      apiRequest(`/api/meals/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({ title: \"Refeição atualizada com sucesso!\" });\n      setDialogOpen(false);\n      setEditingMeal(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(`/api/meals/${id}`, {\n        method: \"DELETE\",\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n      toast({ title: \"Refeição removida com sucesso!\" });\n    },\n  });\n\n  const form = useForm<InsertMeal>({\n    resolver: zodResolver(insertMealSchema),\n    defaultValues: {\n      nome: \"\",\n      calorias: 0,\n      proteinas: \"0\",\n      carboidratos: \"0\",\n      gorduras: \"0\",\n      data: format(new Date(), \"yyyy-MM-dd\"),\n      refeicao: \"cafe\",\n      observacoes: \"\",\n    },\n  });\n\n  const onSubmit = (data: InsertMeal) => {\n    if (editingMeal) {\n      updateMutation.mutate({ id: editingMeal.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (meal: Meal) => {\n    setEditingMeal(meal);\n    form.reset({\n      nome: meal.nome,\n      calorias: meal.calorias || 0,\n      proteinas: meal.proteinas || \"0\",\n      carboidratos: meal.carboidratos || \"0\",\n      gorduras: meal.gorduras || \"0\",\n      data: meal.data,\n      refeicao: meal.refeicao,\n      observacoes: meal.observacoes || \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Tem certeza que deseja excluir esta refeição?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleDialogClose = (open: boolean) => {\n    setDialogOpen(open);\n    if (!open) {\n      setEditingMeal(null);\n      form.reset();\n    }\n  };\n\n  const totalCalorias = meals.reduce((sum, m) => sum + (m.calorias || 0), 0);\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-4xl font-bold\">Dieta</h1>\n        <Dialog open={dialogOpen} onOpenChange={handleDialogClose}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-meal\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nova Refeição\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingMeal ? \"Editar Refeição\" : \"Nova Refeição\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"nome\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nome</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ex: Frango com batata doce\"\n                          data-testid=\"input-nome\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"refeicao\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Refeição</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-refeicao\">\n                            <SelectValue placeholder=\"Selecione\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"cafe\">Café da Manhã</SelectItem>\n                          <SelectItem value=\"lanche_manha\">Lanche da Manhã</SelectItem>\n                          <SelectItem value=\"almoco\">Almoço</SelectItem>\n                          <SelectItem value=\"lanche_tarde\">Lanche da Tarde</SelectItem>\n                          <SelectItem value=\"jantar\">Jantar</SelectItem>\n                          <SelectItem value=\"ceia\">Ceia</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"calorias\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Calorias</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            data-testid=\"input-calorias\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"proteinas\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Proteínas (g)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.1\"\n                            data-testid=\"input-proteinas\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"carboidratos\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Carboidratos (g)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.1\"\n                            data-testid=\"input-carboidratos\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"gorduras\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gorduras (g)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.1\"\n                            data-testid=\"input-gorduras\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={form.control}\n                  name=\"data\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Data</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          data-testid=\"input-data\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"observacoes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Observações</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Notas sobre a refeição...\"\n                          data-testid=\"input-observacoes\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-submit-meal\"\n                >\n                  {editingMeal ? \"Atualizar\" : \"Adicionar\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total de Calorias Hoje</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold font-mono\" data-testid=\"text-calorias-total\">\n            {totalCalorias} kcal\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Refeições</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <p>Carregando...</p>\n          ) : meals.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">\n              Nenhuma refeição cadastrada. Adicione uma nova refeição para começar.\n            </p>\n          ) : (\n            <div className=\"space-y-2\">\n              {meals.map((meal) => (\n                <div\n                  key={meal.id}\n                  className=\"flex items-center justify-between p-4 rounded-md border\"\n                  data-testid={`meal-item-${meal.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">{meal.nome}</h3>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {meal.refeicao.replace(/_/g, \" \")}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {meal.calorias} kcal • P: {meal.proteinas}g • C: {meal.carboidratos}g • G: {meal.gorduras}g\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {format(new Date(meal.data), \"dd/MM/yyyy\")}\n                    </p>\n                    {meal.observacoes && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {meal.observacoes}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleEdit(meal)}\n                      data-testid={`button-edit-${meal.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleDelete(meal.id)}\n                      data-testid={`button-delete-${meal.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13957},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"attached_assets/vite.config_1761510492027_1761521527025.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/vite_1761521644309.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"attached_assets/postcss.config_1761510492028_1761521547989.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"attached_assets/db_1761507822901_1761510687233_1761521565023.ts":{"content":"// Referência: javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":529},"attached_assets/study_1761510896236_1761521527018.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, BookOpen, ExternalLink, Star, Code, Globe, Database } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { StudyMaterial } from \"@shared/schema\";\n\nconst subjects = [\n  {\n    name: \"Python\",\n    icon: Code,\n    color: \"text-chart-1\",\n    description: \"Linguagem versátil e poderosa\",\n  },\n  {\n    name: \"JavaScript\",\n    icon: Code,\n    color: \"text-chart-3\",\n    description: \"Linguagem essencial para web\",\n  },\n  {\n    name: \"Web Development\",\n    icon: Globe,\n    color: \"text-chart-5\",\n    description: \"HTML, CSS e frameworks\",\n  },\n  {\n    name: \"Programação Geral\",\n    icon: Database,\n    color: \"text-chart-2\",\n    description: \"Conceitos fundamentais\",\n  },\n];\n\nexport default function Study() {\n  const [selectedSubject, setSelectedSubject] = useState<string | null>(null);\n\n  // Fetch study materials from backend\n  const { data: allMaterials = [], isLoading } = useQuery<StudyMaterial[]>({\n    queryKey: [\"/api/study-materials\"],\n  });\n\n  const filteredMaterials = selectedSubject\n    ? allMaterials.filter((m) => m.subject === selectedSubject)\n    : allMaterials;\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">Estudos</h1>\n            <p className=\"text-muted-foreground\">\n              Biblioteca de materiais de programação e desenvolvimento\n            </p>\n          </div>\n          <Button data-testid=\"button-add-material\">\n            <Plus className=\"h-4 w-4\" />\n            Adicionar Material\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"library\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n            <TabsTrigger value=\"library\" data-testid=\"tab-library\">\n              Biblioteca\n            </TabsTrigger>\n            <TabsTrigger value=\"progress\" data-testid=\"tab-progress\">\n              Meu Progresso\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"library\" className=\"space-y-6 mt-6\">\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              {subjects.map((subject) => (\n                <Card\n                  key={subject.name}\n                  className={`cursor-pointer hover-elevate ${\n                    selectedSubject === subject.name ? \"border-primary\" : \"\"\n                  }`}\n                  onClick={() =>\n                    setSelectedSubject(selectedSubject === subject.name ? null : subject.name)\n                  }\n                  data-testid={`card-subject-${subject.name}`}\n                >\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <subject.icon className={`h-8 w-8 ${subject.color}`} />\n                      {selectedSubject === subject.name && (\n                        <Star className=\"h-4 w-4 fill-primary text-primary\" />\n                      )}\n                    </div>\n                    <CardTitle className=\"text-base mt-2\">{subject.name}</CardTitle>\n                    <CardDescription className=\"text-xs\">{subject.description}</CardDescription>\n                  </CardHeader>\n                </Card>\n              ))}\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-xl font-semibold\">\n                    {selectedSubject ? `Materiais de ${selectedSubject}` : \"Todos os Materiais\"}\n                  </h2>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {filteredMaterials.length} recursos disponíveis\n                  </p>\n                </div>\n                {selectedSubject && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedSubject(null)}\n                    data-testid=\"button-clear-filter\"\n                  >\n                    Limpar filtro\n                  </Button>\n                )}\n              </div>\n\n              {isLoading ? (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {[...Array(6)].map((_, i) => (\n                    <Card key={i}>\n                      <CardHeader>\n                        <Skeleton className=\"h-5 w-3/4\" />\n                        <Skeleton className=\"h-4 w-full mt-2\" />\n                      </CardHeader>\n                      <CardContent>\n                        <Skeleton className=\"h-9 w-full\" />\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {filteredMaterials.map((material) => (\n                    <Card key={material.id} className=\"hover-elevate\">\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div className=\"flex-1\">\n                            <CardTitle className=\"text-base line-clamp-1\">{material.title}</CardTitle>\n                            <CardDescription className=\"mt-1.5 line-clamp-2\">\n                              {material.description}\n                            </CardDescription>\n                          </div>\n                          <BookOpen className=\"h-5 w-5 text-primary flex-shrink-0\" />\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"flex flex-wrap gap-2\">\n                          <Badge variant=\"secondary\">{material.level}</Badge>\n                          <Badge variant=\"outline\">{material.type}</Badge>\n                          {material.isFree && <Badge className=\"bg-chart-2\">Grátis</Badge>}\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full\"\n                          asChild\n                          data-testid={`button-open-material-${material.id}`}\n                        >\n                          <a href={material.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            Acessar Material\n                            <ExternalLink className=\"h-3 w-3\" />\n                          </a>\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"progress\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Seu Progresso de Estudos</CardTitle>\n                <CardDescription>\n                  Acompanhe seus materiais e conquistas\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid gap-4 md:grid-cols-3\">\n                    <div className=\"p-4 rounded-lg bg-muted\">\n                      <p className=\"text-sm text-muted-foreground\">Materiais Iniciados</p>\n                      <p className=\"text-2xl font-bold mt-1\">0</p>\n                    </div>\n                    <div className=\"p-4 rounded-lg bg-muted\">\n                      <p className=\"text-sm text-muted-foreground\">Em Progresso</p>\n                      <p className=\"text-2xl font-bold mt-1\">0</p>\n                    </div>\n                    <div className=\"p-4 rounded-lg bg-muted\">\n                      <p className=\"text-sm text-muted-foreground\">Concluídos</p>\n                      <p className=\"text-2xl font-bold mt-1 text-chart-2\">0</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-center h-48 border-2 border-dashed rounded-lg mt-6\">\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        Comece seus estudos e acompanhe seu progresso aqui\n                      </p>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setSelectedSubject(\"Python\")}\n                        data-testid=\"button-start-studying\"\n                      >\n                        <Star className=\"h-4 w-4\" />\n                        Começar a Estudar\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9327},"attached_assets/queryClient_1761521614707.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"attached_assets/workouts_1761510896237_1761521527026.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Dumbbell, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useUser } from \"@/hooks/use-user\";\nimport type { Workout, WorkoutLog } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst workoutTypes = [\"Push/Pull/Legs\", \"Full Body\", \"Upper/Lower\", \"Bro Split\", \"Outro\"];\nconst muscleGroups = [\"Peito\", \"Costas\", \"Pernas\", \"Ombros\", \"Braços\", \"Core\"];\n\nexport default function Workouts() {\n  const { userId } = useUser();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Fetch workouts and logs from backend\n  const { data: workouts = [], isLoading: workoutsLoading } = useQuery<Workout[]>({\n    queryKey: [`/api/workouts?userId=${userId}`],\n  });\n\n  const { data: workoutLogs = [], isLoading: logsLoading } = useQuery<WorkoutLog[]>({\n    queryKey: [`/api/workout-logs?userId=${userId}`],\n  });\n\n  // Calculate stats\n  const oneWeekAgo = new Date();\n  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n  const workoutsThisWeek = workoutLogs.filter(\n    (log) => new Date(log.completedAt) >= oneWeekAgo\n  ).length;\n\n  return (\n    <div className=\"flex-1 overflow-auto\">\n      <div className=\"container mx-auto p-6 space-y-6\">\n        <div className=\"flex items-center justify-between flex-wrap gap-4\">\n          <div className=\"space-y-1\">\n            <h1 className=\"text-3xl font-semibold tracking-tight\">Treinos</h1>\n            <p className=\"text-muted-foreground\">\n              Gerencie seus programas de treino e acompanhe seu progresso\n            </p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-workout\">\n                <Plus className=\"h-4 w-4\" />\n                Novo Treino\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Criar Novo Treino</DialogTitle>\n                <DialogDescription>\n                  Configure seu programa de treino personalizado\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"workout-name\">Nome do Treino</Label>\n                  <Input\n                    id=\"workout-name\"\n                    placeholder=\"Ex: Treino A - Peito e Tríceps\"\n                    data-testid=\"input-workout-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"workout-type\">Tipo de Treino</Label>\n                  <Select>\n                    <SelectTrigger data-testid=\"select-workout-type\">\n                      <SelectValue placeholder=\"Selecione o tipo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {workoutTypes.map((type) => (\n                        <SelectItem key={type} value={type}>\n                          {type}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"workout-description\">Descrição</Label>\n                  <Textarea\n                    id=\"workout-description\"\n                    placeholder=\"Descreva os objetivos e detalhes do treino...\"\n                    data-testid=\"input-workout-description\"\n                  />\n                </div>\n                <Button className=\"w-full\" data-testid=\"button-save-workout\">\n                  Criar Treino\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Tabs defaultValue=\"programs\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n            <TabsTrigger value=\"programs\" data-testid=\"tab-programs\">\n              Programas\n            </TabsTrigger>\n            <TabsTrigger value=\"library\" data-testid=\"tab-library\">\n              Biblioteca\n            </TabsTrigger>\n            <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n              Histórico\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"programs\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Dumbbell className=\"h-5 w-5 text-primary\" />\n                  Seus Programas de Treino\n                </CardTitle>\n                <CardDescription>\n                  Organize seus treinos em programas semanais\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-40 border-2 border-dashed rounded-lg\">\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Nenhum programa criado ainda\n                    </p>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setIsDialogOpen(true)}\n                      data-testid=\"button-create-first-workout\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                      Criar Primeiro Treino\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"library\" className=\"space-y-4 mt-6\">\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              {muscleGroups.map((group, index) => (\n                <Card key={group} className=\"hover-elevate\">\n                  <CardHeader>\n                    <CardTitle className=\"text-base\">{group}</CardTitle>\n                    <CardDescription>\n                      Biblioteca de exercícios\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        0 exercícios\n                      </span>\n                      <Badge variant=\"secondary\">Em breve</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-4 mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-primary\" />\n                  Histórico de Treinos\n                </CardTitle>\n                <CardDescription>\n                  Acompanhe seu progresso ao longo do tempo\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-40 text-muted-foreground\">\n                  <p className=\"text-sm\">Nenhum treino registrado ainda</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8067},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"attached_assets/index_1761521588603.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 12%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 12%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 217 91% 42%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 15% 88%;\n\n  --sidebar-accent-foreground: 217 30% 20%;\n\n  --sidebar-ring: 217 91% 42%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 12%;\n\n  --popover-border: 0 0% 86%;\n\n  --primary: 217 91% 42%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 0 0% 15%;\n\n  --muted: 217 8% 90%;\n\n  --muted-foreground: 217 12% 32%;\n\n  --accent: 217 12% 88%;\n\n  --accent-foreground: 217 20% 24%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 78%;\n  --ring: 217 91% 42%;\n  --chart-1: 217 91% 42%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 65% 48%;\n  --chart-5: 12 76% 61%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.08), 0px 2px 4px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.12), 0px 3px 6px -3px hsl(0 0% 0% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.15), 0px 4px 8px -4px hsl(0 0% 0% / 0.1);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.18), 0px 8px 12px -6px hsl(0 0% 0% / 0.12);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.22);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 18%;\n\n  --card: 0 0% 10%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 16%;\n\n  --sidebar: 0 0% 12%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 18%;\n\n  --sidebar-primary: 217 91% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 217 12% 18%;\n\n  --sidebar-accent-foreground: 217 25% 85%;\n\n  --sidebar-ring: 217 91% 45%;\n\n  --popover: 0 0% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 217 91% 48%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 18%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 217 8% 16%;\n\n  --muted-foreground: 217 12% 75%;\n\n  --accent: 217 10% 18%;\n\n  --accent-foreground: 217 15% 85%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 28%;\n  --ring: 217 91% 48%;\n  --chart-1: 217 91% 58%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 280 65% 68%;\n  --chart-5: 12 76% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.45), 0px 2px 4px -2px hsl(0 0% 0% / 0.3);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.5), 0px 3px 6px -3px hsl(0 0% 0% / 0.35);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.6), 0px 4px 8px -4px hsl(0 0% 0% / 0.4);\n  --shadow-xl: 0px 20px 30px -8px hsl(0 0% 0% / 0.7), 0px 8px 12px -6px hsl(0 0% 0% / 0.5);\n  --shadow-2xl: 0px 25px 40px -12px hsl(0 0% 0% / 0.8);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Utility classes for monospace numbers (financial data, calculator results) */\n  .font-mono-numbers {\n    font-family: var(--font-mono);\n    font-variant-numeric: tabular-nums;\n  }\n\n  /* Smooth transitions for all interactive elements */\n  .transition-smooth {\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}","size_bytes":11260},"attached_assets/main_1761510790698_1761521547996.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/tailwind.config_1761521290425.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"attached_assets/main_1761521588605.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"attached_assets/use-toast_1761521622616.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"attached_assets/routes_1761510881690_1761521527028.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertWorkoutSchema, insertExerciseSchema, insertWorkoutLogSchema,\n  insertFoodItemSchema, insertMealSchema, insertNutritionProfileSchema,\n  insertTransactionSchema, insertTaskSchema, insertNoteSchema,\n  insertStudyMaterialSchema, insertUserProgressSchema, insertChatMessageSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // ========== Health Check ==========\n  app.get(\"/api/health\", (_req, res) => {\n    res.json({ status: \"ok\" });\n  });\n\n  // ========== Users ==========\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // ========== Workouts ==========\n  app.get(\"/api/workouts\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const workouts = await storage.getWorkouts(userId);\n      res.json(workouts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch workouts\" });\n    }\n  });\n\n  app.get(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const workout = await storage.getWorkout(req.params.id);\n      if (!workout) {\n        return res.status(404).json({ error: \"Workout not found\" });\n      }\n      res.json(workout);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch workout\" });\n    }\n  });\n\n  app.post(\"/api/workouts\", async (req, res) => {\n    try {\n      const parsed = insertWorkoutSchema.parse(req.body);\n      const workout = await storage.createWorkout(parsed);\n      res.status(201).json(workout);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create workout\" });\n    }\n  });\n\n  app.patch(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      const workout = await storage.updateWorkout(req.params.id, req.body);\n      res.json(workout);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update workout\" });\n    }\n  });\n\n  app.delete(\"/api/workouts/:id\", async (req, res) => {\n    try {\n      await storage.deleteWorkout(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete workout\" });\n    }\n  });\n\n  // ========== Exercises ==========\n  app.get(\"/api/exercises\", async (req, res) => {\n    try {\n      const workoutId = req.query.workoutId as string;\n      if (!workoutId) {\n        return res.status(400).json({ error: \"workoutId is required\" });\n      }\n      const exercises = await storage.getExercises(workoutId);\n      res.json(exercises);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch exercises\" });\n    }\n  });\n\n  app.post(\"/api/exercises\", async (req, res) => {\n    try {\n      const parsed = insertExerciseSchema.parse(req.body);\n      const exercise = await storage.createExercise(parsed);\n      res.status(201).json(exercise);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create exercise\" });\n    }\n  });\n\n  app.patch(\"/api/exercises/:id\", async (req, res) => {\n    try {\n      const exercise = await storage.updateExercise(req.params.id, req.body);\n      res.json(exercise);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update exercise\" });\n    }\n  });\n\n  app.delete(\"/api/exercises/:id\", async (req, res) => {\n    try {\n      await storage.deleteExercise(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete exercise\" });\n    }\n  });\n\n  // ========== Workout Logs ==========\n  app.get(\"/api/workout-logs\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const date = req.query.date as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const logs = await storage.getWorkoutLogs(userId, date);\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch workout logs\" });\n    }\n  });\n\n  app.post(\"/api/workout-logs\", async (req, res) => {\n    try {\n      const parsed = insertWorkoutLogSchema.parse(req.body);\n      const log = await storage.createWorkoutLog(parsed);\n      res.status(201).json(log);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create workout log\" });\n    }\n  });\n\n  // ========== Food Items ==========\n  app.get(\"/api/food-items\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string | undefined;\n      const foods = await storage.getFoodItems(userId);\n      res.json(foods);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch food items\" });\n    }\n  });\n\n  app.post(\"/api/food-items\", async (req, res) => {\n    try {\n      const parsed = insertFoodItemSchema.parse(req.body);\n      const food = await storage.createFoodItem(parsed);\n      res.status(201).json(food);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create food item\" });\n    }\n  });\n\n  // ========== Meals ==========\n  app.get(\"/api/meals\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const date = req.query.date as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const meals = await storage.getMeals(userId, date);\n      res.json(meals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch meals\" });\n    }\n  });\n\n  app.post(\"/api/meals\", async (req, res) => {\n    try {\n      const parsed = insertMealSchema.parse(req.body);\n      const meal = await storage.createMeal(parsed);\n      res.status(201).json(meal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create meal\" });\n    }\n  });\n\n  app.delete(\"/api/meals/:id\", async (req, res) => {\n    try {\n      await storage.deleteMeal(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete meal\" });\n    }\n  });\n\n  // ========== Nutrition Profile ==========\n  app.get(\"/api/nutrition-profile/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getNutritionProfile(req.params.userId);\n      if (!profile) {\n        return res.status(404).json({ error: \"Profile not found\" });\n      }\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch nutrition profile\" });\n    }\n  });\n\n  app.post(\"/api/nutrition-profile\", async (req, res) => {\n    try {\n      const parsed = insertNutritionProfileSchema.parse(req.body);\n      const profile = await storage.upsertNutritionProfile(parsed);\n      res.json(profile);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to save nutrition profile\" });\n    }\n  });\n\n  // ========== Transactions ==========\n  app.get(\"/api/transactions\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const month = req.query.month as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const transactions = await storage.getTransactions(userId, month);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const parsed = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(parsed);\n      res.status(201).json(transaction);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create transaction\" });\n    }\n  });\n\n  app.delete(\"/api/transactions/:id\", async (req, res) => {\n    try {\n      await storage.deleteTransaction(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete transaction\" });\n    }\n  });\n\n  // ========== Tasks ==========\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const date = req.query.date as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const tasks = await storage.getTasks(userId, date);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const parsed = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(parsed);\n      res.status(201).json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const task = await storage.updateTask(req.params.id, req.body);\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      await storage.deleteTask(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // ========== Notes ==========\n  app.get(\"/api/notes\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const date = req.query.date as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const notes = await storage.getNotes(userId, date);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch notes\" });\n    }\n  });\n\n  app.post(\"/api/notes\", async (req, res) => {\n    try {\n      const parsed = insertNoteSchema.parse(req.body);\n      const note = await storage.createNote(parsed);\n      res.status(201).json(note);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create note\" });\n    }\n  });\n\n  app.patch(\"/api/notes/:id\", async (req, res) => {\n    try {\n      const note = await storage.updateNote(req.params.id, req.body);\n      res.json(note);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update note\" });\n    }\n  });\n\n  app.delete(\"/api/notes/:id\", async (req, res) => {\n    try {\n      await storage.deleteNote(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete note\" });\n    }\n  });\n\n  // ========== Study Materials ==========\n  app.get(\"/api/study-materials\", async (req, res) => {\n    try {\n      const subject = req.query.subject as string | undefined;\n      const materials = await storage.getStudyMaterials(subject);\n      res.json(materials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch study materials\" });\n    }\n  });\n\n  app.post(\"/api/study-materials\", async (req, res) => {\n    try {\n      const parsed = insertStudyMaterialSchema.parse(req.body);\n      const material = await storage.createStudyMaterial(parsed);\n      res.status(201).json(material);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create study material\" });\n    }\n  });\n\n  app.delete(\"/api/study-materials/:id\", async (req, res) => {\n    try {\n      await storage.deleteStudyMaterial(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete study material\" });\n    }\n  });\n\n  // ========== User Progress ==========\n  app.get(\"/api/user-progress\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const materialId = req.query.materialId as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const progress = await storage.getUserProgress(userId, materialId);\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user progress\" });\n    }\n  });\n\n  app.post(\"/api/user-progress\", async (req, res) => {\n    try {\n      const parsed = insertUserProgressSchema.parse(req.body);\n      const progress = await storage.upsertUserProgress(parsed);\n      res.json(progress);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to save user progress\" });\n    }\n  });\n\n  // ========== Chat Messages ==========\n  app.get(\"/api/chat-messages\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const context = req.query.context as string | undefined;\n      if (!userId) {\n        return res.status(400).json({ error: \"userId is required\" });\n      }\n      const messages = await storage.getChatMessages(userId, context);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch chat messages\" });\n    }\n  });\n\n  app.post(\"/api/chat-messages\", async (req, res) => {\n    try {\n      const parsed = insertChatMessageSchema.parse(req.body);\n      const message = await storage.createChatMessage(parsed);\n      res.status(201).json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create chat message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14932},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"attached_assets/index_1761521644308.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"attached_assets/storage_1761507822900_1761510774298_1761521527030.ts":{"content":"// Referência: javascript_database e javascript_log_in_with_replit blueprints\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport {\n  users,\n  workouts,\n  exercises,\n  workoutLogs,\n  foodItems,\n  meals,\n  userNutritionProfile,\n  transactions,\n  tasks,\n  notes,\n  studyMaterials,\n  userProgress,\n  chatMessages,\n  type User,\n  type UpsertUser,\n  type Workout,\n  type InsertWorkout,\n  type Exercise,\n  type InsertExercise,\n  type WorkoutLog,\n  type InsertWorkoutLog,\n  type FoodItem,\n  type InsertFoodItem,\n  type Meal,\n  type InsertMeal,\n  type NutritionProfile,\n  type InsertNutritionProfile,\n  type Transaction,\n  type InsertTransaction,\n  type Task,\n  type InsertTask,\n  type Note,\n  type InsertNote,\n  type StudyMaterial,\n  type InsertStudyMaterial,\n  type UserProgress,\n  type InsertUserProgress,\n  type ChatMessage,\n  type InsertChatMessage,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations (obrigatório para Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Workouts\n  getWorkouts(userId: string): Promise<Workout[]>;\n  createWorkout(workout: InsertWorkout & { userId: string }): Promise<Workout>;\n  getExercises(workoutId: string): Promise<Exercise[]>;\n  createExercise(exercise: InsertExercise): Promise<Exercise>;\n  getWorkoutLogs(userId: string, exerciseId?: string): Promise<WorkoutLog[]>;\n  createWorkoutLog(log: InsertWorkoutLog & { userId: string }): Promise<WorkoutLog>;\n  \n  // Diet\n  getFoodItems(userId?: string): Promise<FoodItem[]>;\n  createFoodItem(item: InsertFoodItem & { userId?: string }): Promise<FoodItem>;\n  getMeals(userId: string, date?: string): Promise<Meal[]>;\n  createMeal(meal: InsertMeal & { userId: string }): Promise<Meal>;\n  getNutritionProfile(userId: string): Promise<NutritionProfile | undefined>;\n  upsertNutritionProfile(profile: InsertNutritionProfile & { userId: string }): Promise<NutritionProfile>;\n  \n  // Finance\n  getTransactions(userId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction & { userId: string }): Promise<Transaction>;\n  getTransactionsSummary(userId: string): Promise<{ totalReceitas: string; totalDespesas: string }>;\n  \n  // Agenda\n  getTasks(userId: string): Promise<Task[]>;\n  createTask(task: InsertTask & { userId: string }): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task>;\n  getNotes(userId: string): Promise<Note[]>;\n  createNote(note: InsertNote & { userId: string }): Promise<Note>;\n  \n  // Estudos\n  getStudyMaterials(userId?: string): Promise<StudyMaterial[]>;\n  createStudyMaterial(material: InsertStudyMaterial & { userId?: string }): Promise<StudyMaterial>;\n  getUserProgress(userId: string, materialId?: string): Promise<UserProgress[]>;\n  upsertUserProgress(progress: InsertUserProgress & { userId: string }): Promise<UserProgress>;\n  \n  // Chat\n  getChatMessages(userId: string, context?: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage & { userId: string }): Promise<ChatMessage>;\n  \n  // Dashboard stats\n  getDashboardStats(userId: string): Promise<{\n    workoutsThisWeek: number;\n    caloriesToday: number;\n    balanceThisMonth: number;\n    pendingTasks: number;\n    studyMaterials: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // ============================================================================\n  // User operations (obrigatório para Replit Auth)\n  // ============================================================================\n  \n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n  \n  // ============================================================================\n  // Workouts\n  // ============================================================================\n  \n  async getWorkouts(userId: string): Promise<Workout[]> {\n    return await db.select().from(workouts)\n      .where(eq(workouts.userId, userId))\n      .orderBy(desc(workouts.createdAt));\n  }\n\n  async createWorkout(workout: InsertWorkout & { userId: string }): Promise<Workout> {\n    const [newWorkout] = await db.insert(workouts).values(workout).returning();\n    return newWorkout;\n  }\n\n  async getExercises(workoutId: string): Promise<Exercise[]> {\n    return await db.select().from(exercises)\n      .where(eq(exercises.workoutId, workoutId))\n      .orderBy(exercises.order);\n  }\n\n  async createExercise(exercise: InsertExercise): Promise<Exercise> {\n    const [newExercise] = await db.insert(exercises).values(exercise).returning();\n    return newExercise;\n  }\n\n  async getWorkoutLogs(userId: string, exerciseId?: string): Promise<WorkoutLog[]> {\n    const conditions = exerciseId\n      ? and(eq(workoutLogs.userId, userId), eq(workoutLogs.exerciseId, exerciseId))\n      : eq(workoutLogs.userId, userId);\n    \n    return await db.select().from(workoutLogs)\n      .where(conditions!)\n      .orderBy(desc(workoutLogs.date));\n  }\n\n  async createWorkoutLog(log: InsertWorkoutLog & { userId: string }): Promise<WorkoutLog> {\n    const [newLog] = await db.insert(workoutLogs).values(log).returning();\n    return newLog;\n  }\n  \n  // ============================================================================\n  // Diet\n  // ============================================================================\n  \n  async getFoodItems(userId?: string): Promise<FoodItem[]> {\n    const condition = userId\n      ? sql`${foodItems.userId} = ${userId} OR ${foodItems.userId} IS NULL`\n      : sql`${foodItems.userId} IS NULL`;\n    \n    return await db.select().from(foodItems)\n      .where(condition)\n      .orderBy(foodItems.name);\n  }\n\n  async createFoodItem(item: InsertFoodItem & { userId?: string }): Promise<FoodItem> {\n    const [newItem] = await db.insert(foodItems).values(item).returning();\n    return newItem;\n  }\n\n  async getMeals(userId: string, date?: string): Promise<Meal[]> {\n    const conditions = date\n      ? and(eq(meals.userId, userId), eq(meals.date, date))\n      : eq(meals.userId, userId);\n    \n    return await db.select().from(meals)\n      .where(conditions!)\n      .orderBy(desc(meals.createdAt));\n  }\n\n  async createMeal(meal: InsertMeal & { userId: string }): Promise<Meal> {\n    const [newMeal] = await db.insert(meals).values(meal).returning();\n    return newMeal;\n  }\n\n  async getNutritionProfile(userId: string): Promise<NutritionProfile | undefined> {\n    const [profile] = await db.select().from(userNutritionProfile)\n      .where(eq(userNutritionProfile.userId, userId));\n    return profile;\n  }\n\n  async upsertNutritionProfile(profile: InsertNutritionProfile & { userId: string }): Promise<NutritionProfile> {\n    const [result] = await db\n      .insert(userNutritionProfile)\n      .values(profile)\n      .onConflictDoUpdate({\n        target: userNutritionProfile.userId,\n        set: {\n          ...profile,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n  \n  // ============================================================================\n  // Finance\n  // ============================================================================\n  \n  async getTransactions(userId: string): Promise<Transaction[]> {\n    return await db.select().from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.date), desc(transactions.createdAt));\n  }\n\n  async createTransaction(transaction: InsertTransaction & { userId: string }): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getTransactionsSummary(userId: string): Promise<{ totalReceitas: string; totalDespesas: string }> {\n    const result = await db\n      .select({\n        type: transactions.type,\n        total: sql<string>`COALESCE(SUM(${transactions.amount}), 0)`,\n      })\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .groupBy(transactions.type);\n\n    const summary = {\n      totalReceitas: \"0\",\n      totalDespesas: \"0\",\n    };\n\n    result.forEach(row => {\n      if (row.type === \"Receita\") summary.totalReceitas = row.total;\n      if (row.type === \"Despesa\") summary.totalDespesas = row.total;\n    });\n\n    return summary;\n  }\n  \n  // ============================================================================\n  // Agenda\n  // ============================================================================\n  \n  async getTasks(userId: string): Promise<Task[]> {\n    return await db.select().from(tasks)\n      .where(eq(tasks.userId, userId))\n      .orderBy(tasks.date, tasks.time);\n  }\n\n  async createTask(task: InsertTask & { userId: string }): Promise<Task> {\n    const [newTask] = await db.insert(tasks).values(task).returning();\n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const [updatedTask] = await db.update(tasks)\n      .set(updates)\n      .where(eq(tasks.id, id))\n      .returning();\n    return updatedTask;\n  }\n\n  async getNotes(userId: string): Promise<Note[]> {\n    return await db.select().from(notes)\n      .where(eq(notes.userId, userId))\n      .orderBy(desc(notes.date));\n  }\n\n  async createNote(note: InsertNote & { userId: string }): Promise<Note> {\n    const [newNote] = await db.insert(notes).values(note).returning();\n    return newNote;\n  }\n  \n  // ============================================================================\n  // Estudos\n  // ============================================================================\n  \n  async getStudyMaterials(userId?: string): Promise<StudyMaterial[]> {\n    const condition = userId\n      ? sql`${studyMaterials.userId} = ${userId} OR ${studyMaterials.userId} IS NULL`\n      : sql`${studyMaterials.userId} IS NULL`;\n    \n    return await db.select().from(studyMaterials)\n      .where(condition)\n      .orderBy(studyMaterials.subject, studyMaterials.level);\n  }\n\n  async createStudyMaterial(material: InsertStudyMaterial & { userId?: string }): Promise<StudyMaterial> {\n    const [newMaterial] = await db.insert(studyMaterials).values(material).returning();\n    return newMaterial;\n  }\n\n  async getUserProgress(userId: string, materialId?: string): Promise<UserProgress[]> {\n    const conditions = materialId\n      ? and(eq(userProgress.userId, userId), eq(userProgress.materialId, materialId))\n      : eq(userProgress.userId, userId);\n    \n    return await db.select().from(userProgress)\n      .where(conditions!)\n      .orderBy(desc(userProgress.updatedAt));\n  }\n\n  async upsertUserProgress(progress: InsertUserProgress & { userId: string }): Promise<UserProgress> {\n    const existing = await db.select().from(userProgress)\n      .where(and(\n        eq(userProgress.userId, progress.userId),\n        eq(userProgress.materialId, progress.materialId)\n      ));\n\n    if (existing.length > 0) {\n      const [updated] = await db.update(userProgress)\n        .set({ ...progress, updatedAt: new Date() })\n        .where(eq(userProgress.id, existing[0].id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(userProgress).values(progress).returning();\n      return created;\n    }\n  }\n  \n  // ============================================================================\n  // Chat\n  // ============================================================================\n  \n  async getChatMessages(userId: string, context?: string): Promise<ChatMessage[]> {\n    const conditions = context\n      ? and(eq(chatMessages.userId, userId), eq(chatMessages.context, context))\n      : eq(chatMessages.userId, userId);\n    \n    return await db.select().from(chatMessages)\n      .where(conditions!)\n      .orderBy(chatMessages.createdAt);\n  }\n\n  async createChatMessage(message: InsertChatMessage & { userId: string }): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n  \n  // ============================================================================\n  // Dashboard stats\n  // ============================================================================\n  \n  async getDashboardStats(userId: string): Promise<{\n    workoutsThisWeek: number;\n    caloriesToday: number;\n    balanceThisMonth: number;\n    pendingTasks: number;\n    studyMaterials: number;\n  }> {\n    const now = new Date();\n    const today = now.toISOString().split('T')[0];\n    \n    // Workouts this week\n    const startOfWeek = new Date(now);\n    startOfWeek.setDate(now.getDate() - now.getDay());\n    const workoutsCount = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(workoutLogs)\n      .where(and(\n        eq(workoutLogs.userId, userId),\n        sql`${workoutLogs.date} >= ${startOfWeek.toISOString().split('T')[0]}`\n      ));\n    \n    // Pending tasks\n    const pendingCount = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(tasks)\n      .where(and(\n        eq(tasks.userId, userId),\n        eq(tasks.completed, false)\n      ));\n    \n    // Study materials\n    const materialsCount = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(studyMaterials)\n      .where(sql`${studyMaterials.userId} IS NULL`);\n    \n    // Balance this month\n    const summary = await this.getTransactionsSummary(userId);\n    const balance = Number(summary.totalReceitas) - Number(summary.totalDespesas);\n    \n    return {\n      workoutsThisWeek: Number(workoutsCount[0]?.count || 0),\n      caloriesToday: 0, // Será calculado com base nas refeições\n      balanceThisMonth: balance,\n      pendingTasks: Number(pendingCount[0]?.count || 0),\n      studyMaterials: Number(materialsCount[0]?.count || 0),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14110},"attached_assets/App_1761521588602.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Financas from \"@/pages/financas\";\nimport Treinos from \"@/pages/treinos\";\nimport Dieta from \"@/pages/dieta\";\nimport Agenda from \"@/pages/agenda\";\nimport Estudos from \"@/pages/estudos\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/financas\" component={Financas} />\n      <Route path=\"/treinos\" component={Treinos} />\n      <Route path=\"/dieta\" component={Dieta} />\n      <Route path=\"/agenda\" component={Agenda} />\n      <Route path=\"/estudos\" component={Estudos} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1\">\n              <header className=\"flex items-center justify-between p-2 border-b\">\n                <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                <ThemeToggle />\n              </header>\n              <main className=\"flex-1 overflow-auto\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1986},"attached_assets/utils_1761521614703.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325}},"version":2}